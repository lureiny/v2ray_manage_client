// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_redis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_redis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_redis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_redis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redis_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_redis_2eproto_metadata_getter(int index);
namespace redis {
class AddUserOperation;
struct AddUserOperationDefaultTypeInternal;
extern AddUserOperationDefaultTypeInternal _AddUserOperation_default_instance_;
class AddUserOperationResponse;
struct AddUserOperationResponseDefaultTypeInternal;
extern AddUserOperationResponseDefaultTypeInternal _AddUserOperationResponse_default_instance_;
class GetStatsOperation;
struct GetStatsOperationDefaultTypeInternal;
extern GetStatsOperationDefaultTypeInternal _GetStatsOperation_default_instance_;
class GetStatsOperationResponse;
struct GetStatsOperationResponseDefaultTypeInternal;
extern GetStatsOperationResponseDefaultTypeInternal _GetStatsOperationResponse_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class RemoveUserOperation;
struct RemoveUserOperationDefaultTypeInternal;
extern RemoveUserOperationDefaultTypeInternal _RemoveUserOperation_default_instance_;
class RemoveUserOperationResponse;
struct RemoveUserOperationResponseDefaultTypeInternal;
extern RemoveUserOperationResponseDefaultTypeInternal _RemoveUserOperationResponse_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Stats;
struct StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
}  // namespace redis
PROTOBUF_NAMESPACE_OPEN
template<> ::redis::AddUserOperation* Arena::CreateMaybeMessage<::redis::AddUserOperation>(Arena*);
template<> ::redis::AddUserOperationResponse* Arena::CreateMaybeMessage<::redis::AddUserOperationResponse>(Arena*);
template<> ::redis::GetStatsOperation* Arena::CreateMaybeMessage<::redis::GetStatsOperation>(Arena*);
template<> ::redis::GetStatsOperationResponse* Arena::CreateMaybeMessage<::redis::GetStatsOperationResponse>(Arena*);
template<> ::redis::Operation* Arena::CreateMaybeMessage<::redis::Operation>(Arena*);
template<> ::redis::RemoveUserOperation* Arena::CreateMaybeMessage<::redis::RemoveUserOperation>(Arena*);
template<> ::redis::RemoveUserOperationResponse* Arena::CreateMaybeMessage<::redis::RemoveUserOperationResponse>(Arena*);
template<> ::redis::Response* Arena::CreateMaybeMessage<::redis::Response>(Arena*);
template<> ::redis::Stats* Arena::CreateMaybeMessage<::redis::Stats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace redis {

// ===================================================================

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  virtual ~Operation();
  explicit constexpr Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kChannelFieldNumber = 3,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string channel = 3;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // @@protoc_insertion_point(class_scope:redis.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class AddUserOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.AddUserOperation) */ {
 public:
  inline AddUserOperation() : AddUserOperation(nullptr) {}
  virtual ~AddUserOperation();
  explicit constexpr AddUserOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddUserOperation(const AddUserOperation& from);
  AddUserOperation(AddUserOperation&& from) noexcept
    : AddUserOperation() {
    *this = ::std::move(from);
  }

  inline AddUserOperation& operator=(const AddUserOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddUserOperation& operator=(AddUserOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddUserOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddUserOperation* internal_default_instance() {
    return reinterpret_cast<const AddUserOperation*>(
               &_AddUserOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddUserOperation& a, AddUserOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(AddUserOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddUserOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddUserOperation* New() const final {
    return CreateMaybeMessage<AddUserOperation>(nullptr);
  }

  AddUserOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddUserOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddUserOperation& from);
  void MergeFrom(const AddUserOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.AddUserOperation";
  }
  protected:
  explicit AddUserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kEmailFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string protocol = 3;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:redis.AddUserOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class RemoveUserOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.RemoveUserOperation) */ {
 public:
  inline RemoveUserOperation() : RemoveUserOperation(nullptr) {}
  virtual ~RemoveUserOperation();
  explicit constexpr RemoveUserOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveUserOperation(const RemoveUserOperation& from);
  RemoveUserOperation(RemoveUserOperation&& from) noexcept
    : RemoveUserOperation() {
    *this = ::std::move(from);
  }

  inline RemoveUserOperation& operator=(const RemoveUserOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveUserOperation& operator=(RemoveUserOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveUserOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveUserOperation* internal_default_instance() {
    return reinterpret_cast<const RemoveUserOperation*>(
               &_RemoveUserOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoveUserOperation& a, RemoveUserOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveUserOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveUserOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveUserOperation* New() const final {
    return CreateMaybeMessage<RemoveUserOperation>(nullptr);
  }

  RemoveUserOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveUserOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveUserOperation& from);
  void MergeFrom(const RemoveUserOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveUserOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.RemoveUserOperation";
  }
  protected:
  explicit RemoveUserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:redis.RemoveUserOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class GetStatsOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.GetStatsOperation) */ {
 public:
  inline GetStatsOperation() : GetStatsOperation(nullptr) {}
  virtual ~GetStatsOperation();
  explicit constexpr GetStatsOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatsOperation(const GetStatsOperation& from);
  GetStatsOperation(GetStatsOperation&& from) noexcept
    : GetStatsOperation() {
    *this = ::std::move(from);
  }

  inline GetStatsOperation& operator=(const GetStatsOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatsOperation& operator=(GetStatsOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatsOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatsOperation* internal_default_instance() {
    return reinterpret_cast<const GetStatsOperation*>(
               &_GetStatsOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStatsOperation& a, GetStatsOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatsOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatsOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatsOperation* New() const final {
    return CreateMaybeMessage<GetStatsOperation>(nullptr);
  }

  GetStatsOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatsOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatsOperation& from);
  void MergeFrom(const GetStatsOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatsOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.GetStatsOperation";
  }
  protected:
  explicit GetStatsOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:redis.GetStatsOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:redis.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class AddUserOperationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.AddUserOperationResponse) */ {
 public:
  inline AddUserOperationResponse() : AddUserOperationResponse(nullptr) {}
  virtual ~AddUserOperationResponse();
  explicit constexpr AddUserOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddUserOperationResponse(const AddUserOperationResponse& from);
  AddUserOperationResponse(AddUserOperationResponse&& from) noexcept
    : AddUserOperationResponse() {
    *this = ::std::move(from);
  }

  inline AddUserOperationResponse& operator=(const AddUserOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddUserOperationResponse& operator=(AddUserOperationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddUserOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddUserOperationResponse* internal_default_instance() {
    return reinterpret_cast<const AddUserOperationResponse*>(
               &_AddUserOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddUserOperationResponse& a, AddUserOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddUserOperationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddUserOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddUserOperationResponse* New() const final {
    return CreateMaybeMessage<AddUserOperationResponse>(nullptr);
  }

  AddUserOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddUserOperationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddUserOperationResponse& from);
  void MergeFrom(const AddUserOperationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserOperationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.AddUserOperationResponse";
  }
  protected:
  explicit AddUserOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kAddUserOperationFieldNumber = 3,
    kStatuFieldNumber = 1,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .redis.AddUserOperation add_user_operation = 3;
  bool has_add_user_operation() const;
  private:
  bool _internal_has_add_user_operation() const;
  public:
  void clear_add_user_operation();
  const ::redis::AddUserOperation& add_user_operation() const;
  ::redis::AddUserOperation* release_add_user_operation();
  ::redis::AddUserOperation* mutable_add_user_operation();
  void set_allocated_add_user_operation(::redis::AddUserOperation* add_user_operation);
  private:
  const ::redis::AddUserOperation& _internal_add_user_operation() const;
  ::redis::AddUserOperation* _internal_mutable_add_user_operation();
  public:
  void unsafe_arena_set_allocated_add_user_operation(
      ::redis::AddUserOperation* add_user_operation);
  ::redis::AddUserOperation* unsafe_arena_release_add_user_operation();

  // bool statu = 1;
  void clear_statu();
  bool statu() const;
  void set_statu(bool value);
  private:
  bool _internal_statu() const;
  void _internal_set_statu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redis.AddUserOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::redis::AddUserOperation* add_user_operation_;
  bool statu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class RemoveUserOperationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.RemoveUserOperationResponse) */ {
 public:
  inline RemoveUserOperationResponse() : RemoveUserOperationResponse(nullptr) {}
  virtual ~RemoveUserOperationResponse();
  explicit constexpr RemoveUserOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveUserOperationResponse(const RemoveUserOperationResponse& from);
  RemoveUserOperationResponse(RemoveUserOperationResponse&& from) noexcept
    : RemoveUserOperationResponse() {
    *this = ::std::move(from);
  }

  inline RemoveUserOperationResponse& operator=(const RemoveUserOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveUserOperationResponse& operator=(RemoveUserOperationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveUserOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveUserOperationResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveUserOperationResponse*>(
               &_RemoveUserOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemoveUserOperationResponse& a, RemoveUserOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveUserOperationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveUserOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveUserOperationResponse* New() const final {
    return CreateMaybeMessage<RemoveUserOperationResponse>(nullptr);
  }

  RemoveUserOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveUserOperationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveUserOperationResponse& from);
  void MergeFrom(const RemoveUserOperationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveUserOperationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.RemoveUserOperationResponse";
  }
  protected:
  explicit RemoveUserOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kRemoveUserOperationFieldNumber = 3,
    kStatuFieldNumber = 1,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .redis.RemoveUserOperation remove_user_operation = 3;
  bool has_remove_user_operation() const;
  private:
  bool _internal_has_remove_user_operation() const;
  public:
  void clear_remove_user_operation();
  const ::redis::RemoveUserOperation& remove_user_operation() const;
  ::redis::RemoveUserOperation* release_remove_user_operation();
  ::redis::RemoveUserOperation* mutable_remove_user_operation();
  void set_allocated_remove_user_operation(::redis::RemoveUserOperation* remove_user_operation);
  private:
  const ::redis::RemoveUserOperation& _internal_remove_user_operation() const;
  ::redis::RemoveUserOperation* _internal_mutable_remove_user_operation();
  public:
  void unsafe_arena_set_allocated_remove_user_operation(
      ::redis::RemoveUserOperation* remove_user_operation);
  ::redis::RemoveUserOperation* unsafe_arena_release_remove_user_operation();

  // bool statu = 1;
  void clear_statu();
  bool statu() const;
  void set_statu(bool value);
  private:
  bool _internal_statu() const;
  void _internal_set_statu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redis.RemoveUserOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::redis::RemoveUserOperation* remove_user_operation_;
  bool statu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class GetStatsOperationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.GetStatsOperationResponse) */ {
 public:
  inline GetStatsOperationResponse() : GetStatsOperationResponse(nullptr) {}
  virtual ~GetStatsOperationResponse();
  explicit constexpr GetStatsOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatsOperationResponse(const GetStatsOperationResponse& from);
  GetStatsOperationResponse(GetStatsOperationResponse&& from) noexcept
    : GetStatsOperationResponse() {
    *this = ::std::move(from);
  }

  inline GetStatsOperationResponse& operator=(const GetStatsOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatsOperationResponse& operator=(GetStatsOperationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatsOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatsOperationResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatsOperationResponse*>(
               &_GetStatsOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetStatsOperationResponse& a, GetStatsOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatsOperationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatsOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStatsOperationResponse* New() const final {
    return CreateMaybeMessage<GetStatsOperationResponse>(nullptr);
  }

  GetStatsOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatsOperationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatsOperationResponse& from);
  void MergeFrom(const GetStatsOperationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatsOperationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.GetStatsOperationResponse";
  }
  protected:
  explicit GetStatsOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .redis.Stats stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::redis::Stats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >*
      mutable_stats();
  private:
  const ::redis::Stats& _internal_stats(int index) const;
  ::redis::Stats* _internal_add_stats();
  public:
  const ::redis::Stats& stats(int index) const;
  ::redis::Stats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:redis.GetStatsOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// -------------------------------------------------------------------

class Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redis.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {}
  virtual ~Stats();
  explicit constexpr Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return CreateMaybeMessage<Stats>(nullptr);
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redis.Stats";
  }
  protected:
  explicit Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_redis_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDownlinkFieldNumber = 3,
    kUplinkFieldNumber = 4,
    kOnlineFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int64 downlink = 3;
  void clear_downlink();
  ::PROTOBUF_NAMESPACE_ID::int64 downlink() const;
  void set_downlink(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_downlink() const;
  void _internal_set_downlink(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 uplink = 4;
  void clear_uplink();
  ::PROTOBUF_NAMESPACE_ID::int64 uplink() const;
  void set_uplink(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uplink() const;
  void _internal_set_uplink(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool online = 5;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redis.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int64 downlink_;
  ::PROTOBUF_NAMESPACE_ID::int64 uplink_;
  bool online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operation

// string type = 1;
inline void Operation::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Operation::type() const {
  // @@protoc_insertion_point(field_get:redis.Operation.type)
  return _internal_type();
}
inline void Operation::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:redis.Operation.type)
}
inline std::string* Operation::mutable_type() {
  // @@protoc_insertion_point(field_mutable:redis.Operation.type)
  return _internal_mutable_type();
}
inline const std::string& Operation::_internal_type() const {
  return type_.Get();
}
inline void Operation::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Operation::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.Operation.type)
}
inline void Operation::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.Operation.type)
}
inline void Operation::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.Operation.type)
}
inline std::string* Operation::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Operation::release_type() {
  // @@protoc_insertion_point(field_release:redis.Operation.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.Operation.type)
}

// bytes value = 2;
inline void Operation::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Operation::value() const {
  // @@protoc_insertion_point(field_get:redis.Operation.value)
  return _internal_value();
}
inline void Operation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:redis.Operation.value)
}
inline std::string* Operation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:redis.Operation.value)
  return _internal_mutable_value();
}
inline const std::string& Operation::_internal_value() const {
  return value_.Get();
}
inline void Operation::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Operation::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.Operation.value)
}
inline void Operation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.Operation.value)
}
inline void Operation::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.Operation.value)
}
inline std::string* Operation::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Operation::release_value() {
  // @@protoc_insertion_point(field_release:redis.Operation.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.Operation.value)
}

// string channel = 3;
inline void Operation::clear_channel() {
  channel_.ClearToEmpty();
}
inline const std::string& Operation::channel() const {
  // @@protoc_insertion_point(field_get:redis.Operation.channel)
  return _internal_channel();
}
inline void Operation::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:redis.Operation.channel)
}
inline std::string* Operation::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:redis.Operation.channel)
  return _internal_mutable_channel();
}
inline const std::string& Operation::_internal_channel() const {
  return channel_.Get();
}
inline void Operation::_internal_set_channel(const std::string& value) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Operation::set_channel(std::string&& value) {
  
  channel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.Operation.channel)
}
inline void Operation::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.Operation.channel)
}
inline void Operation::set_channel(const char* value,
    size_t size) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.Operation.channel)
}
inline std::string* Operation::_internal_mutable_channel() {
  
  return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Operation::release_channel() {
  // @@protoc_insertion_point(field_release:redis.Operation.channel)
  return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.Operation.channel)
}

// -------------------------------------------------------------------

// AddUserOperation

// string tag = 1;
inline void AddUserOperation::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& AddUserOperation::tag() const {
  // @@protoc_insertion_point(field_get:redis.AddUserOperation.tag)
  return _internal_tag();
}
inline void AddUserOperation::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:redis.AddUserOperation.tag)
}
inline std::string* AddUserOperation::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:redis.AddUserOperation.tag)
  return _internal_mutable_tag();
}
inline const std::string& AddUserOperation::_internal_tag() const {
  return tag_.Get();
}
inline void AddUserOperation::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddUserOperation::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.AddUserOperation.tag)
}
inline void AddUserOperation::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.AddUserOperation.tag)
}
inline void AddUserOperation::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.AddUserOperation.tag)
}
inline std::string* AddUserOperation::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddUserOperation::release_tag() {
  // @@protoc_insertion_point(field_release:redis.AddUserOperation.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddUserOperation::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.AddUserOperation.tag)
}

// string email = 2;
inline void AddUserOperation::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& AddUserOperation::email() const {
  // @@protoc_insertion_point(field_get:redis.AddUserOperation.email)
  return _internal_email();
}
inline void AddUserOperation::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:redis.AddUserOperation.email)
}
inline std::string* AddUserOperation::mutable_email() {
  // @@protoc_insertion_point(field_mutable:redis.AddUserOperation.email)
  return _internal_mutable_email();
}
inline const std::string& AddUserOperation::_internal_email() const {
  return email_.Get();
}
inline void AddUserOperation::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddUserOperation::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.AddUserOperation.email)
}
inline void AddUserOperation::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.AddUserOperation.email)
}
inline void AddUserOperation::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.AddUserOperation.email)
}
inline std::string* AddUserOperation::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddUserOperation::release_email() {
  // @@protoc_insertion_point(field_release:redis.AddUserOperation.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddUserOperation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.AddUserOperation.email)
}

// string protocol = 3;
inline void AddUserOperation::clear_protocol() {
  protocol_.ClearToEmpty();
}
inline const std::string& AddUserOperation::protocol() const {
  // @@protoc_insertion_point(field_get:redis.AddUserOperation.protocol)
  return _internal_protocol();
}
inline void AddUserOperation::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:redis.AddUserOperation.protocol)
}
inline std::string* AddUserOperation::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:redis.AddUserOperation.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& AddUserOperation::_internal_protocol() const {
  return protocol_.Get();
}
inline void AddUserOperation::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddUserOperation::set_protocol(std::string&& value) {
  
  protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.AddUserOperation.protocol)
}
inline void AddUserOperation::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.AddUserOperation.protocol)
}
inline void AddUserOperation::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.AddUserOperation.protocol)
}
inline std::string* AddUserOperation::_internal_mutable_protocol() {
  
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddUserOperation::release_protocol() {
  // @@protoc_insertion_point(field_release:redis.AddUserOperation.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddUserOperation::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.AddUserOperation.protocol)
}

// string id = 4;
inline bool AddUserOperation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddUserOperation::has_id() const {
  return _internal_has_id();
}
inline void AddUserOperation::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddUserOperation::id() const {
  // @@protoc_insertion_point(field_get:redis.AddUserOperation.id)
  return _internal_id();
}
inline void AddUserOperation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:redis.AddUserOperation.id)
}
inline std::string* AddUserOperation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:redis.AddUserOperation.id)
  return _internal_mutable_id();
}
inline const std::string& AddUserOperation::_internal_id() const {
  return id_.Get();
}
inline void AddUserOperation::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddUserOperation::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.AddUserOperation.id)
}
inline void AddUserOperation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.AddUserOperation.id)
}
inline void AddUserOperation::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.AddUserOperation.id)
}
inline std::string* AddUserOperation::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddUserOperation::release_id() {
  // @@protoc_insertion_point(field_release:redis.AddUserOperation.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddUserOperation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.AddUserOperation.id)
}

// -------------------------------------------------------------------

// RemoveUserOperation

// string tag = 1;
inline void RemoveUserOperation::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& RemoveUserOperation::tag() const {
  // @@protoc_insertion_point(field_get:redis.RemoveUserOperation.tag)
  return _internal_tag();
}
inline void RemoveUserOperation::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:redis.RemoveUserOperation.tag)
}
inline std::string* RemoveUserOperation::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:redis.RemoveUserOperation.tag)
  return _internal_mutable_tag();
}
inline const std::string& RemoveUserOperation::_internal_tag() const {
  return tag_.Get();
}
inline void RemoveUserOperation::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveUserOperation::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.RemoveUserOperation.tag)
}
inline void RemoveUserOperation::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.RemoveUserOperation.tag)
}
inline void RemoveUserOperation::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.RemoveUserOperation.tag)
}
inline std::string* RemoveUserOperation::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveUserOperation::release_tag() {
  // @@protoc_insertion_point(field_release:redis.RemoveUserOperation.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveUserOperation::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.RemoveUserOperation.tag)
}

// string email = 2;
inline void RemoveUserOperation::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& RemoveUserOperation::email() const {
  // @@protoc_insertion_point(field_get:redis.RemoveUserOperation.email)
  return _internal_email();
}
inline void RemoveUserOperation::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:redis.RemoveUserOperation.email)
}
inline std::string* RemoveUserOperation::mutable_email() {
  // @@protoc_insertion_point(field_mutable:redis.RemoveUserOperation.email)
  return _internal_mutable_email();
}
inline const std::string& RemoveUserOperation::_internal_email() const {
  return email_.Get();
}
inline void RemoveUserOperation::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveUserOperation::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.RemoveUserOperation.email)
}
inline void RemoveUserOperation::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.RemoveUserOperation.email)
}
inline void RemoveUserOperation::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.RemoveUserOperation.email)
}
inline std::string* RemoveUserOperation::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveUserOperation::release_email() {
  // @@protoc_insertion_point(field_release:redis.RemoveUserOperation.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveUserOperation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.RemoveUserOperation.email)
}

// -------------------------------------------------------------------

// GetStatsOperation

// string type = 1;
inline void GetStatsOperation::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& GetStatsOperation::type() const {
  // @@protoc_insertion_point(field_get:redis.GetStatsOperation.type)
  return _internal_type();
}
inline void GetStatsOperation::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:redis.GetStatsOperation.type)
}
inline std::string* GetStatsOperation::mutable_type() {
  // @@protoc_insertion_point(field_mutable:redis.GetStatsOperation.type)
  return _internal_mutable_type();
}
inline const std::string& GetStatsOperation::_internal_type() const {
  return type_.Get();
}
inline void GetStatsOperation::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetStatsOperation::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.GetStatsOperation.type)
}
inline void GetStatsOperation::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.GetStatsOperation.type)
}
inline void GetStatsOperation::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.GetStatsOperation.type)
}
inline std::string* GetStatsOperation::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetStatsOperation::release_type() {
  // @@protoc_insertion_point(field_release:redis.GetStatsOperation.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatsOperation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.GetStatsOperation.type)
}

// string name = 2;
inline void GetStatsOperation::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetStatsOperation::name() const {
  // @@protoc_insertion_point(field_get:redis.GetStatsOperation.name)
  return _internal_name();
}
inline void GetStatsOperation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:redis.GetStatsOperation.name)
}
inline std::string* GetStatsOperation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:redis.GetStatsOperation.name)
  return _internal_mutable_name();
}
inline const std::string& GetStatsOperation::_internal_name() const {
  return name_.Get();
}
inline void GetStatsOperation::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetStatsOperation::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.GetStatsOperation.name)
}
inline void GetStatsOperation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.GetStatsOperation.name)
}
inline void GetStatsOperation::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.GetStatsOperation.name)
}
inline std::string* GetStatsOperation::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetStatsOperation::release_name() {
  // @@protoc_insertion_point(field_release:redis.GetStatsOperation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStatsOperation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.GetStatsOperation.name)
}

// -------------------------------------------------------------------

// Response

// string type = 1;
inline void Response::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Response::type() const {
  // @@protoc_insertion_point(field_get:redis.Response.type)
  return _internal_type();
}
inline void Response::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:redis.Response.type)
}
inline std::string* Response::mutable_type() {
  // @@protoc_insertion_point(field_mutable:redis.Response.type)
  return _internal_mutable_type();
}
inline const std::string& Response::_internal_type() const {
  return type_.Get();
}
inline void Response::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.Response.type)
}
inline void Response::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.Response.type)
}
inline void Response::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.Response.type)
}
inline std::string* Response::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_type() {
  // @@protoc_insertion_point(field_release:redis.Response.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.Response.type)
}

// bytes value = 2;
inline void Response::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Response::value() const {
  // @@protoc_insertion_point(field_get:redis.Response.value)
  return _internal_value();
}
inline void Response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:redis.Response.value)
}
inline std::string* Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:redis.Response.value)
  return _internal_mutable_value();
}
inline const std::string& Response::_internal_value() const {
  return value_.Get();
}
inline void Response::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.Response.value)
}
inline void Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.Response.value)
}
inline void Response::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.Response.value)
}
inline std::string* Response::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_value() {
  // @@protoc_insertion_point(field_release:redis.Response.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.Response.value)
}

// -------------------------------------------------------------------

// AddUserOperationResponse

// bool statu = 1;
inline void AddUserOperationResponse::clear_statu() {
  statu_ = false;
}
inline bool AddUserOperationResponse::_internal_statu() const {
  return statu_;
}
inline bool AddUserOperationResponse::statu() const {
  // @@protoc_insertion_point(field_get:redis.AddUserOperationResponse.statu)
  return _internal_statu();
}
inline void AddUserOperationResponse::_internal_set_statu(bool value) {
  
  statu_ = value;
}
inline void AddUserOperationResponse::set_statu(bool value) {
  _internal_set_statu(value);
  // @@protoc_insertion_point(field_set:redis.AddUserOperationResponse.statu)
}

// string ip = 2;
inline void AddUserOperationResponse::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& AddUserOperationResponse::ip() const {
  // @@protoc_insertion_point(field_get:redis.AddUserOperationResponse.ip)
  return _internal_ip();
}
inline void AddUserOperationResponse::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:redis.AddUserOperationResponse.ip)
}
inline std::string* AddUserOperationResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:redis.AddUserOperationResponse.ip)
  return _internal_mutable_ip();
}
inline const std::string& AddUserOperationResponse::_internal_ip() const {
  return ip_.Get();
}
inline void AddUserOperationResponse::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddUserOperationResponse::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.AddUserOperationResponse.ip)
}
inline void AddUserOperationResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.AddUserOperationResponse.ip)
}
inline void AddUserOperationResponse::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.AddUserOperationResponse.ip)
}
inline std::string* AddUserOperationResponse::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddUserOperationResponse::release_ip() {
  // @@protoc_insertion_point(field_release:redis.AddUserOperationResponse.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddUserOperationResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.AddUserOperationResponse.ip)
}

// .redis.AddUserOperation add_user_operation = 3;
inline bool AddUserOperationResponse::_internal_has_add_user_operation() const {
  return this != internal_default_instance() && add_user_operation_ != nullptr;
}
inline bool AddUserOperationResponse::has_add_user_operation() const {
  return _internal_has_add_user_operation();
}
inline void AddUserOperationResponse::clear_add_user_operation() {
  if (GetArena() == nullptr && add_user_operation_ != nullptr) {
    delete add_user_operation_;
  }
  add_user_operation_ = nullptr;
}
inline const ::redis::AddUserOperation& AddUserOperationResponse::_internal_add_user_operation() const {
  const ::redis::AddUserOperation* p = add_user_operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::redis::AddUserOperation&>(
      ::redis::_AddUserOperation_default_instance_);
}
inline const ::redis::AddUserOperation& AddUserOperationResponse::add_user_operation() const {
  // @@protoc_insertion_point(field_get:redis.AddUserOperationResponse.add_user_operation)
  return _internal_add_user_operation();
}
inline void AddUserOperationResponse::unsafe_arena_set_allocated_add_user_operation(
    ::redis::AddUserOperation* add_user_operation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_user_operation_);
  }
  add_user_operation_ = add_user_operation;
  if (add_user_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redis.AddUserOperationResponse.add_user_operation)
}
inline ::redis::AddUserOperation* AddUserOperationResponse::release_add_user_operation() {
  
  ::redis::AddUserOperation* temp = add_user_operation_;
  add_user_operation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redis::AddUserOperation* AddUserOperationResponse::unsafe_arena_release_add_user_operation() {
  // @@protoc_insertion_point(field_release:redis.AddUserOperationResponse.add_user_operation)
  
  ::redis::AddUserOperation* temp = add_user_operation_;
  add_user_operation_ = nullptr;
  return temp;
}
inline ::redis::AddUserOperation* AddUserOperationResponse::_internal_mutable_add_user_operation() {
  
  if (add_user_operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::redis::AddUserOperation>(GetArena());
    add_user_operation_ = p;
  }
  return add_user_operation_;
}
inline ::redis::AddUserOperation* AddUserOperationResponse::mutable_add_user_operation() {
  // @@protoc_insertion_point(field_mutable:redis.AddUserOperationResponse.add_user_operation)
  return _internal_mutable_add_user_operation();
}
inline void AddUserOperationResponse::set_allocated_add_user_operation(::redis::AddUserOperation* add_user_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete add_user_operation_;
  }
  if (add_user_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_user_operation);
    if (message_arena != submessage_arena) {
      add_user_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_user_operation, submessage_arena);
    }
    
  } else {
    
  }
  add_user_operation_ = add_user_operation;
  // @@protoc_insertion_point(field_set_allocated:redis.AddUserOperationResponse.add_user_operation)
}

// -------------------------------------------------------------------

// RemoveUserOperationResponse

// bool statu = 1;
inline void RemoveUserOperationResponse::clear_statu() {
  statu_ = false;
}
inline bool RemoveUserOperationResponse::_internal_statu() const {
  return statu_;
}
inline bool RemoveUserOperationResponse::statu() const {
  // @@protoc_insertion_point(field_get:redis.RemoveUserOperationResponse.statu)
  return _internal_statu();
}
inline void RemoveUserOperationResponse::_internal_set_statu(bool value) {
  
  statu_ = value;
}
inline void RemoveUserOperationResponse::set_statu(bool value) {
  _internal_set_statu(value);
  // @@protoc_insertion_point(field_set:redis.RemoveUserOperationResponse.statu)
}

// string ip = 2;
inline void RemoveUserOperationResponse::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& RemoveUserOperationResponse::ip() const {
  // @@protoc_insertion_point(field_get:redis.RemoveUserOperationResponse.ip)
  return _internal_ip();
}
inline void RemoveUserOperationResponse::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:redis.RemoveUserOperationResponse.ip)
}
inline std::string* RemoveUserOperationResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:redis.RemoveUserOperationResponse.ip)
  return _internal_mutable_ip();
}
inline const std::string& RemoveUserOperationResponse::_internal_ip() const {
  return ip_.Get();
}
inline void RemoveUserOperationResponse::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveUserOperationResponse::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.RemoveUserOperationResponse.ip)
}
inline void RemoveUserOperationResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.RemoveUserOperationResponse.ip)
}
inline void RemoveUserOperationResponse::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.RemoveUserOperationResponse.ip)
}
inline std::string* RemoveUserOperationResponse::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveUserOperationResponse::release_ip() {
  // @@protoc_insertion_point(field_release:redis.RemoveUserOperationResponse.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveUserOperationResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.RemoveUserOperationResponse.ip)
}

// .redis.RemoveUserOperation remove_user_operation = 3;
inline bool RemoveUserOperationResponse::_internal_has_remove_user_operation() const {
  return this != internal_default_instance() && remove_user_operation_ != nullptr;
}
inline bool RemoveUserOperationResponse::has_remove_user_operation() const {
  return _internal_has_remove_user_operation();
}
inline void RemoveUserOperationResponse::clear_remove_user_operation() {
  if (GetArena() == nullptr && remove_user_operation_ != nullptr) {
    delete remove_user_operation_;
  }
  remove_user_operation_ = nullptr;
}
inline const ::redis::RemoveUserOperation& RemoveUserOperationResponse::_internal_remove_user_operation() const {
  const ::redis::RemoveUserOperation* p = remove_user_operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::redis::RemoveUserOperation&>(
      ::redis::_RemoveUserOperation_default_instance_);
}
inline const ::redis::RemoveUserOperation& RemoveUserOperationResponse::remove_user_operation() const {
  // @@protoc_insertion_point(field_get:redis.RemoveUserOperationResponse.remove_user_operation)
  return _internal_remove_user_operation();
}
inline void RemoveUserOperationResponse::unsafe_arena_set_allocated_remove_user_operation(
    ::redis::RemoveUserOperation* remove_user_operation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_user_operation_);
  }
  remove_user_operation_ = remove_user_operation;
  if (remove_user_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redis.RemoveUserOperationResponse.remove_user_operation)
}
inline ::redis::RemoveUserOperation* RemoveUserOperationResponse::release_remove_user_operation() {
  
  ::redis::RemoveUserOperation* temp = remove_user_operation_;
  remove_user_operation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redis::RemoveUserOperation* RemoveUserOperationResponse::unsafe_arena_release_remove_user_operation() {
  // @@protoc_insertion_point(field_release:redis.RemoveUserOperationResponse.remove_user_operation)
  
  ::redis::RemoveUserOperation* temp = remove_user_operation_;
  remove_user_operation_ = nullptr;
  return temp;
}
inline ::redis::RemoveUserOperation* RemoveUserOperationResponse::_internal_mutable_remove_user_operation() {
  
  if (remove_user_operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::redis::RemoveUserOperation>(GetArena());
    remove_user_operation_ = p;
  }
  return remove_user_operation_;
}
inline ::redis::RemoveUserOperation* RemoveUserOperationResponse::mutable_remove_user_operation() {
  // @@protoc_insertion_point(field_mutable:redis.RemoveUserOperationResponse.remove_user_operation)
  return _internal_mutable_remove_user_operation();
}
inline void RemoveUserOperationResponse::set_allocated_remove_user_operation(::redis::RemoveUserOperation* remove_user_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remove_user_operation_;
  }
  if (remove_user_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_user_operation);
    if (message_arena != submessage_arena) {
      remove_user_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_user_operation, submessage_arena);
    }
    
  } else {
    
  }
  remove_user_operation_ = remove_user_operation;
  // @@protoc_insertion_point(field_set_allocated:redis.RemoveUserOperationResponse.remove_user_operation)
}

// -------------------------------------------------------------------

// GetStatsOperationResponse

// repeated .redis.Stats stats = 1;
inline int GetStatsOperationResponse::_internal_stats_size() const {
  return stats_.size();
}
inline int GetStatsOperationResponse::stats_size() const {
  return _internal_stats_size();
}
inline void GetStatsOperationResponse::clear_stats() {
  stats_.Clear();
}
inline ::redis::Stats* GetStatsOperationResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:redis.GetStatsOperationResponse.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >*
GetStatsOperationResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:redis.GetStatsOperationResponse.stats)
  return &stats_;
}
inline const ::redis::Stats& GetStatsOperationResponse::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::redis::Stats& GetStatsOperationResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:redis.GetStatsOperationResponse.stats)
  return _internal_stats(index);
}
inline ::redis::Stats* GetStatsOperationResponse::_internal_add_stats() {
  return stats_.Add();
}
inline ::redis::Stats* GetStatsOperationResponse::add_stats() {
  // @@protoc_insertion_point(field_add:redis.GetStatsOperationResponse.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >&
GetStatsOperationResponse::stats() const {
  // @@protoc_insertion_point(field_list:redis.GetStatsOperationResponse.stats)
  return stats_;
}

// -------------------------------------------------------------------

// Stats

// string name = 1;
inline void Stats::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Stats::name() const {
  // @@protoc_insertion_point(field_get:redis.Stats.name)
  return _internal_name();
}
inline void Stats::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:redis.Stats.name)
}
inline std::string* Stats::mutable_name() {
  // @@protoc_insertion_point(field_mutable:redis.Stats.name)
  return _internal_mutable_name();
}
inline const std::string& Stats::_internal_name() const {
  return name_.Get();
}
inline void Stats::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stats::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.Stats.name)
}
inline void Stats::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.Stats.name)
}
inline void Stats::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.Stats.name)
}
inline std::string* Stats::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stats::release_name() {
  // @@protoc_insertion_point(field_release:redis.Stats.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stats::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.Stats.name)
}

// string type = 2;
inline void Stats::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Stats::type() const {
  // @@protoc_insertion_point(field_get:redis.Stats.type)
  return _internal_type();
}
inline void Stats::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:redis.Stats.type)
}
inline std::string* Stats::mutable_type() {
  // @@protoc_insertion_point(field_mutable:redis.Stats.type)
  return _internal_mutable_type();
}
inline const std::string& Stats::_internal_type() const {
  return type_.Get();
}
inline void Stats::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stats::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redis.Stats.type)
}
inline void Stats::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:redis.Stats.type)
}
inline void Stats::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redis.Stats.type)
}
inline std::string* Stats::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stats::release_type() {
  // @@protoc_insertion_point(field_release:redis.Stats.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stats::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redis.Stats.type)
}

// int64 downlink = 3;
inline void Stats::clear_downlink() {
  downlink_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stats::_internal_downlink() const {
  return downlink_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stats::downlink() const {
  // @@protoc_insertion_point(field_get:redis.Stats.downlink)
  return _internal_downlink();
}
inline void Stats::_internal_set_downlink(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  downlink_ = value;
}
inline void Stats::set_downlink(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_downlink(value);
  // @@protoc_insertion_point(field_set:redis.Stats.downlink)
}

// int64 uplink = 4;
inline void Stats::clear_uplink() {
  uplink_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stats::_internal_uplink() const {
  return uplink_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stats::uplink() const {
  // @@protoc_insertion_point(field_get:redis.Stats.uplink)
  return _internal_uplink();
}
inline void Stats::_internal_set_uplink(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uplink_ = value;
}
inline void Stats::set_uplink(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uplink(value);
  // @@protoc_insertion_point(field_set:redis.Stats.uplink)
}

// bool online = 5;
inline void Stats::clear_online() {
  online_ = false;
}
inline bool Stats::_internal_online() const {
  return online_;
}
inline bool Stats::online() const {
  // @@protoc_insertion_point(field_get:redis.Stats.online)
  return _internal_online();
}
inline void Stats::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void Stats::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:redis.Stats.online)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace redis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_redis_2eproto
