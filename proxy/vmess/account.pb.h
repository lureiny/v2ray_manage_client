// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/vmess/account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fvmess_2faccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fvmess_2faccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/protocol/headers.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2fvmess_2faccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fvmess_2faccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2fvmess_2faccount_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_proxy_2fvmess_2faccount_2eproto_metadata_getter(int index);
namespace v2ray {
namespace core {
namespace proxy {
namespace vmess {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
}  // namespace vmess
}  // namespace proxy
}  // namespace core
}  // namespace v2ray
PROTOBUF_NAMESPACE_OPEN
template<> ::v2ray::core::proxy::vmess::Account* Arena::CreateMaybeMessage<::v2ray::core::proxy::vmess::Account>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v2ray {
namespace core {
namespace proxy {
namespace vmess {

// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.proxy.vmess.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.proxy.vmess.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proxy_2fvmess_2faccount_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTestsEnabledFieldNumber = 4,
    kSecuritySettingsFieldNumber = 3,
    kAlterIdFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string tests_enabled = 4;
  void clear_tests_enabled();
  const std::string& tests_enabled() const;
  void set_tests_enabled(const std::string& value);
  void set_tests_enabled(std::string&& value);
  void set_tests_enabled(const char* value);
  void set_tests_enabled(const char* value, size_t size);
  std::string* mutable_tests_enabled();
  std::string* release_tests_enabled();
  void set_allocated_tests_enabled(std::string* tests_enabled);
  private:
  const std::string& _internal_tests_enabled() const;
  void _internal_set_tests_enabled(const std::string& value);
  std::string* _internal_mutable_tests_enabled();
  public:

  // .v2ray.core.common.protocol.SecurityConfig security_settings = 3;
  bool has_security_settings() const;
  private:
  bool _internal_has_security_settings() const;
  public:
  void clear_security_settings();
  const ::v2ray::core::common::protocol::SecurityConfig& security_settings() const;
  ::v2ray::core::common::protocol::SecurityConfig* release_security_settings();
  ::v2ray::core::common::protocol::SecurityConfig* mutable_security_settings();
  void set_allocated_security_settings(::v2ray::core::common::protocol::SecurityConfig* security_settings);
  private:
  const ::v2ray::core::common::protocol::SecurityConfig& _internal_security_settings() const;
  ::v2ray::core::common::protocol::SecurityConfig* _internal_mutable_security_settings();
  public:
  void unsafe_arena_set_allocated_security_settings(
      ::v2ray::core::common::protocol::SecurityConfig* security_settings);
  ::v2ray::core::common::protocol::SecurityConfig* unsafe_arena_release_security_settings();

  // uint32 alter_id = 2;
  void clear_alter_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 alter_id() const;
  void set_alter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alter_id() const;
  void _internal_set_alter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.proxy.vmess.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tests_enabled_;
  ::v2ray::core::common::protocol::SecurityConfig* security_settings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alter_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fvmess_2faccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string id = 1;
inline void Account::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:v2ray.core.proxy.vmess.Account.id)
  return _internal_id();
}
inline void Account::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:v2ray.core.proxy.vmess.Account.id)
}
inline std::string* Account::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.proxy.vmess.Account.id)
  return _internal_mutable_id();
}
inline const std::string& Account::_internal_id() const {
  return id_.Get();
}
inline void Account::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.proxy.vmess.Account.id)
}
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.proxy.vmess.Account.id)
}
inline void Account::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.proxy.vmess.Account.id)
}
inline std::string* Account::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:v2ray.core.proxy.vmess.Account.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.proxy.vmess.Account.id)
}

// uint32 alter_id = 2;
inline void Account::clear_alter_id() {
  alter_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Account::_internal_alter_id() const {
  return alter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Account::alter_id() const {
  // @@protoc_insertion_point(field_get:v2ray.core.proxy.vmess.Account.alter_id)
  return _internal_alter_id();
}
inline void Account::_internal_set_alter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  alter_id_ = value;
}
inline void Account::set_alter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alter_id(value);
  // @@protoc_insertion_point(field_set:v2ray.core.proxy.vmess.Account.alter_id)
}

// .v2ray.core.common.protocol.SecurityConfig security_settings = 3;
inline bool Account::_internal_has_security_settings() const {
  return this != internal_default_instance() && security_settings_ != nullptr;
}
inline bool Account::has_security_settings() const {
  return _internal_has_security_settings();
}
inline const ::v2ray::core::common::protocol::SecurityConfig& Account::_internal_security_settings() const {
  const ::v2ray::core::common::protocol::SecurityConfig* p = security_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::protocol::SecurityConfig&>(
      ::v2ray::core::common::protocol::_SecurityConfig_default_instance_);
}
inline const ::v2ray::core::common::protocol::SecurityConfig& Account::security_settings() const {
  // @@protoc_insertion_point(field_get:v2ray.core.proxy.vmess.Account.security_settings)
  return _internal_security_settings();
}
inline void Account::unsafe_arena_set_allocated_security_settings(
    ::v2ray::core::common::protocol::SecurityConfig* security_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_settings_);
  }
  security_settings_ = security_settings;
  if (security_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.proxy.vmess.Account.security_settings)
}
inline ::v2ray::core::common::protocol::SecurityConfig* Account::release_security_settings() {
  
  ::v2ray::core::common::protocol::SecurityConfig* temp = security_settings_;
  security_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::protocol::SecurityConfig* Account::unsafe_arena_release_security_settings() {
  // @@protoc_insertion_point(field_release:v2ray.core.proxy.vmess.Account.security_settings)
  
  ::v2ray::core::common::protocol::SecurityConfig* temp = security_settings_;
  security_settings_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::protocol::SecurityConfig* Account::_internal_mutable_security_settings() {
  
  if (security_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::protocol::SecurityConfig>(GetArena());
    security_settings_ = p;
  }
  return security_settings_;
}
inline ::v2ray::core::common::protocol::SecurityConfig* Account::mutable_security_settings() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.proxy.vmess.Account.security_settings)
  return _internal_mutable_security_settings();
}
inline void Account::set_allocated_security_settings(::v2ray::core::common::protocol::SecurityConfig* security_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_settings_);
  }
  if (security_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_settings)->GetArena();
    if (message_arena != submessage_arena) {
      security_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_settings, submessage_arena);
    }
    
  } else {
    
  }
  security_settings_ = security_settings;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.proxy.vmess.Account.security_settings)
}

// string tests_enabled = 4;
inline void Account::clear_tests_enabled() {
  tests_enabled_.ClearToEmpty();
}
inline const std::string& Account::tests_enabled() const {
  // @@protoc_insertion_point(field_get:v2ray.core.proxy.vmess.Account.tests_enabled)
  return _internal_tests_enabled();
}
inline void Account::set_tests_enabled(const std::string& value) {
  _internal_set_tests_enabled(value);
  // @@protoc_insertion_point(field_set:v2ray.core.proxy.vmess.Account.tests_enabled)
}
inline std::string* Account::mutable_tests_enabled() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.proxy.vmess.Account.tests_enabled)
  return _internal_mutable_tests_enabled();
}
inline const std::string& Account::_internal_tests_enabled() const {
  return tests_enabled_.Get();
}
inline void Account::_internal_set_tests_enabled(const std::string& value) {
  
  tests_enabled_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_tests_enabled(std::string&& value) {
  
  tests_enabled_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.proxy.vmess.Account.tests_enabled)
}
inline void Account::set_tests_enabled(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tests_enabled_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.proxy.vmess.Account.tests_enabled)
}
inline void Account::set_tests_enabled(const char* value,
    size_t size) {
  
  tests_enabled_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.proxy.vmess.Account.tests_enabled)
}
inline std::string* Account::_internal_mutable_tests_enabled() {
  
  return tests_enabled_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_tests_enabled() {
  // @@protoc_insertion_point(field_release:v2ray.core.proxy.vmess.Account.tests_enabled)
  return tests_enabled_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_tests_enabled(std::string* tests_enabled) {
  if (tests_enabled != nullptr) {
    
  } else {
    
  }
  tests_enabled_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tests_enabled,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.proxy.vmess.Account.tests_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vmess
}  // namespace proxy
}  // namespace core
}  // namespace v2ray

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2fvmess_2faccount_2eproto
