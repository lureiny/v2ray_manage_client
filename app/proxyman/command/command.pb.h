// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/proxyman/command/command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fproxyman_2fcommand_2fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fproxyman_2fcommand_2fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/protocol/user.pb.h"
#include "common/serial/typed_message.pb.h"
#include "config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fproxyman_2fcommand_2fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(int index);
namespace v2ray {
namespace core {
namespace app {
namespace proxyman {
namespace command {
class AddInboundRequest;
struct AddInboundRequestDefaultTypeInternal;
extern AddInboundRequestDefaultTypeInternal _AddInboundRequest_default_instance_;
class AddInboundResponse;
struct AddInboundResponseDefaultTypeInternal;
extern AddInboundResponseDefaultTypeInternal _AddInboundResponse_default_instance_;
class AddOutboundRequest;
struct AddOutboundRequestDefaultTypeInternal;
extern AddOutboundRequestDefaultTypeInternal _AddOutboundRequest_default_instance_;
class AddOutboundResponse;
struct AddOutboundResponseDefaultTypeInternal;
extern AddOutboundResponseDefaultTypeInternal _AddOutboundResponse_default_instance_;
class AddUserOperation;
struct AddUserOperationDefaultTypeInternal;
extern AddUserOperationDefaultTypeInternal _AddUserOperation_default_instance_;
class AlterInboundRequest;
struct AlterInboundRequestDefaultTypeInternal;
extern AlterInboundRequestDefaultTypeInternal _AlterInboundRequest_default_instance_;
class AlterInboundResponse;
struct AlterInboundResponseDefaultTypeInternal;
extern AlterInboundResponseDefaultTypeInternal _AlterInboundResponse_default_instance_;
class AlterOutboundRequest;
struct AlterOutboundRequestDefaultTypeInternal;
extern AlterOutboundRequestDefaultTypeInternal _AlterOutboundRequest_default_instance_;
class AlterOutboundResponse;
struct AlterOutboundResponseDefaultTypeInternal;
extern AlterOutboundResponseDefaultTypeInternal _AlterOutboundResponse_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class RemoveInboundRequest;
struct RemoveInboundRequestDefaultTypeInternal;
extern RemoveInboundRequestDefaultTypeInternal _RemoveInboundRequest_default_instance_;
class RemoveInboundResponse;
struct RemoveInboundResponseDefaultTypeInternal;
extern RemoveInboundResponseDefaultTypeInternal _RemoveInboundResponse_default_instance_;
class RemoveOutboundRequest;
struct RemoveOutboundRequestDefaultTypeInternal;
extern RemoveOutboundRequestDefaultTypeInternal _RemoveOutboundRequest_default_instance_;
class RemoveOutboundResponse;
struct RemoveOutboundResponseDefaultTypeInternal;
extern RemoveOutboundResponseDefaultTypeInternal _RemoveOutboundResponse_default_instance_;
class RemoveUserOperation;
struct RemoveUserOperationDefaultTypeInternal;
extern RemoveUserOperationDefaultTypeInternal _RemoveUserOperation_default_instance_;
}  // namespace command
}  // namespace proxyman
}  // namespace app
}  // namespace core
}  // namespace v2ray
PROTOBUF_NAMESPACE_OPEN
template<> ::v2ray::core::app::proxyman::command::AddInboundRequest* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AddInboundRequest>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AddInboundResponse* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AddInboundResponse>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AddOutboundRequest* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AddOutboundRequest>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AddOutboundResponse* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AddOutboundResponse>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AddUserOperation* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AddUserOperation>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AlterInboundRequest* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AlterInboundRequest>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AlterInboundResponse* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AlterInboundResponse>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AlterOutboundRequest* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AlterOutboundRequest>(Arena*);
template<> ::v2ray::core::app::proxyman::command::AlterOutboundResponse* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::AlterOutboundResponse>(Arena*);
template<> ::v2ray::core::app::proxyman::command::Config* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::Config>(Arena*);
template<> ::v2ray::core::app::proxyman::command::RemoveInboundRequest* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::RemoveInboundRequest>(Arena*);
template<> ::v2ray::core::app::proxyman::command::RemoveInboundResponse* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::RemoveInboundResponse>(Arena*);
template<> ::v2ray::core::app::proxyman::command::RemoveOutboundRequest* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::RemoveOutboundRequest>(Arena*);
template<> ::v2ray::core::app::proxyman::command::RemoveOutboundResponse* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::RemoveOutboundResponse>(Arena*);
template<> ::v2ray::core::app::proxyman::command::RemoveUserOperation* Arena::CreateMaybeMessage<::v2ray::core::app::proxyman::command::RemoveUserOperation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v2ray {
namespace core {
namespace app {
namespace proxyman {
namespace command {

// ===================================================================

class AddUserOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AddUserOperation) */ {
 public:
  inline AddUserOperation() : AddUserOperation(nullptr) {}
  virtual ~AddUserOperation();
  explicit constexpr AddUserOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddUserOperation(const AddUserOperation& from);
  AddUserOperation(AddUserOperation&& from) noexcept
    : AddUserOperation() {
    *this = ::std::move(from);
  }

  inline AddUserOperation& operator=(const AddUserOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddUserOperation& operator=(AddUserOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddUserOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddUserOperation* internal_default_instance() {
    return reinterpret_cast<const AddUserOperation*>(
               &_AddUserOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddUserOperation& a, AddUserOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(AddUserOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddUserOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddUserOperation* New() const final {
    return CreateMaybeMessage<AddUserOperation>(nullptr);
  }

  AddUserOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddUserOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddUserOperation& from);
  void MergeFrom(const AddUserOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AddUserOperation";
  }
  protected:
  explicit AddUserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .v2ray.core.common.protocol.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::v2ray::core::common::protocol::User& user() const;
  ::v2ray::core::common::protocol::User* release_user();
  ::v2ray::core::common::protocol::User* mutable_user();
  void set_allocated_user(::v2ray::core::common::protocol::User* user);
  private:
  const ::v2ray::core::common::protocol::User& _internal_user() const;
  ::v2ray::core::common::protocol::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::v2ray::core::common::protocol::User* user);
  ::v2ray::core::common::protocol::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AddUserOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v2ray::core::common::protocol::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class RemoveUserOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.RemoveUserOperation) */ {
 public:
  inline RemoveUserOperation() : RemoveUserOperation(nullptr) {}
  virtual ~RemoveUserOperation();
  explicit constexpr RemoveUserOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveUserOperation(const RemoveUserOperation& from);
  RemoveUserOperation(RemoveUserOperation&& from) noexcept
    : RemoveUserOperation() {
    *this = ::std::move(from);
  }

  inline RemoveUserOperation& operator=(const RemoveUserOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveUserOperation& operator=(RemoveUserOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveUserOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveUserOperation* internal_default_instance() {
    return reinterpret_cast<const RemoveUserOperation*>(
               &_RemoveUserOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RemoveUserOperation& a, RemoveUserOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveUserOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveUserOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveUserOperation* New() const final {
    return CreateMaybeMessage<RemoveUserOperation>(nullptr);
  }

  RemoveUserOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveUserOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveUserOperation& from);
  void MergeFrom(const RemoveUserOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveUserOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.RemoveUserOperation";
  }
  protected:
  explicit RemoveUserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.RemoveUserOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AddInboundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AddInboundRequest) */ {
 public:
  inline AddInboundRequest() : AddInboundRequest(nullptr) {}
  virtual ~AddInboundRequest();
  explicit constexpr AddInboundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddInboundRequest(const AddInboundRequest& from);
  AddInboundRequest(AddInboundRequest&& from) noexcept
    : AddInboundRequest() {
    *this = ::std::move(from);
  }

  inline AddInboundRequest& operator=(const AddInboundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInboundRequest& operator=(AddInboundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddInboundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddInboundRequest* internal_default_instance() {
    return reinterpret_cast<const AddInboundRequest*>(
               &_AddInboundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddInboundRequest& a, AddInboundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInboundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInboundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddInboundRequest* New() const final {
    return CreateMaybeMessage<AddInboundRequest>(nullptr);
  }

  AddInboundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddInboundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddInboundRequest& from);
  void MergeFrom(const AddInboundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInboundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AddInboundRequest";
  }
  protected:
  explicit AddInboundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInboundFieldNumber = 1,
  };
  // .v2ray.core.InboundHandlerConfig inbound = 1;
  bool has_inbound() const;
  private:
  bool _internal_has_inbound() const;
  public:
  void clear_inbound();
  const ::v2ray::core::InboundHandlerConfig& inbound() const;
  ::v2ray::core::InboundHandlerConfig* release_inbound();
  ::v2ray::core::InboundHandlerConfig* mutable_inbound();
  void set_allocated_inbound(::v2ray::core::InboundHandlerConfig* inbound);
  private:
  const ::v2ray::core::InboundHandlerConfig& _internal_inbound() const;
  ::v2ray::core::InboundHandlerConfig* _internal_mutable_inbound();
  public:
  void unsafe_arena_set_allocated_inbound(
      ::v2ray::core::InboundHandlerConfig* inbound);
  ::v2ray::core::InboundHandlerConfig* unsafe_arena_release_inbound();

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AddInboundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v2ray::core::InboundHandlerConfig* inbound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AddInboundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AddInboundResponse) */ {
 public:
  inline AddInboundResponse() : AddInboundResponse(nullptr) {}
  virtual ~AddInboundResponse();
  explicit constexpr AddInboundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddInboundResponse(const AddInboundResponse& from);
  AddInboundResponse(AddInboundResponse&& from) noexcept
    : AddInboundResponse() {
    *this = ::std::move(from);
  }

  inline AddInboundResponse& operator=(const AddInboundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInboundResponse& operator=(AddInboundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddInboundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddInboundResponse* internal_default_instance() {
    return reinterpret_cast<const AddInboundResponse*>(
               &_AddInboundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddInboundResponse& a, AddInboundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInboundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInboundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddInboundResponse* New() const final {
    return CreateMaybeMessage<AddInboundResponse>(nullptr);
  }

  AddInboundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddInboundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddInboundResponse& from);
  void MergeFrom(const AddInboundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInboundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AddInboundResponse";
  }
  protected:
  explicit AddInboundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AddInboundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class RemoveInboundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.RemoveInboundRequest) */ {
 public:
  inline RemoveInboundRequest() : RemoveInboundRequest(nullptr) {}
  virtual ~RemoveInboundRequest();
  explicit constexpr RemoveInboundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveInboundRequest(const RemoveInboundRequest& from);
  RemoveInboundRequest(RemoveInboundRequest&& from) noexcept
    : RemoveInboundRequest() {
    *this = ::std::move(from);
  }

  inline RemoveInboundRequest& operator=(const RemoveInboundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveInboundRequest& operator=(RemoveInboundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveInboundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveInboundRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveInboundRequest*>(
               &_RemoveInboundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoveInboundRequest& a, RemoveInboundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveInboundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveInboundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveInboundRequest* New() const final {
    return CreateMaybeMessage<RemoveInboundRequest>(nullptr);
  }

  RemoveInboundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveInboundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveInboundRequest& from);
  void MergeFrom(const RemoveInboundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveInboundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.RemoveInboundRequest";
  }
  protected:
  explicit RemoveInboundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.RemoveInboundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class RemoveInboundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.RemoveInboundResponse) */ {
 public:
  inline RemoveInboundResponse() : RemoveInboundResponse(nullptr) {}
  virtual ~RemoveInboundResponse();
  explicit constexpr RemoveInboundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveInboundResponse(const RemoveInboundResponse& from);
  RemoveInboundResponse(RemoveInboundResponse&& from) noexcept
    : RemoveInboundResponse() {
    *this = ::std::move(from);
  }

  inline RemoveInboundResponse& operator=(const RemoveInboundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveInboundResponse& operator=(RemoveInboundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveInboundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveInboundResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveInboundResponse*>(
               &_RemoveInboundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemoveInboundResponse& a, RemoveInboundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveInboundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveInboundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveInboundResponse* New() const final {
    return CreateMaybeMessage<RemoveInboundResponse>(nullptr);
  }

  RemoveInboundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveInboundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveInboundResponse& from);
  void MergeFrom(const RemoveInboundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveInboundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.RemoveInboundResponse";
  }
  protected:
  explicit RemoveInboundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.RemoveInboundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AlterInboundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AlterInboundRequest) */ {
 public:
  inline AlterInboundRequest() : AlterInboundRequest(nullptr) {}
  virtual ~AlterInboundRequest();
  explicit constexpr AlterInboundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterInboundRequest(const AlterInboundRequest& from);
  AlterInboundRequest(AlterInboundRequest&& from) noexcept
    : AlterInboundRequest() {
    *this = ::std::move(from);
  }

  inline AlterInboundRequest& operator=(const AlterInboundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterInboundRequest& operator=(AlterInboundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlterInboundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterInboundRequest* internal_default_instance() {
    return reinterpret_cast<const AlterInboundRequest*>(
               &_AlterInboundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AlterInboundRequest& a, AlterInboundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterInboundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterInboundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlterInboundRequest* New() const final {
    return CreateMaybeMessage<AlterInboundRequest>(nullptr);
  }

  AlterInboundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlterInboundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlterInboundRequest& from);
  void MergeFrom(const AlterInboundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterInboundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AlterInboundRequest";
  }
  protected:
  explicit AlterInboundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .v2ray.core.common.serial.TypedMessage operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const ::v2ray::core::common::serial::TypedMessage& operation() const;
  ::v2ray::core::common::serial::TypedMessage* release_operation();
  ::v2ray::core::common::serial::TypedMessage* mutable_operation();
  void set_allocated_operation(::v2ray::core::common::serial::TypedMessage* operation);
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_operation() const;
  ::v2ray::core::common::serial::TypedMessage* _internal_mutable_operation();
  public:
  void unsafe_arena_set_allocated_operation(
      ::v2ray::core::common::serial::TypedMessage* operation);
  ::v2ray::core::common::serial::TypedMessage* unsafe_arena_release_operation();

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AlterInboundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::v2ray::core::common::serial::TypedMessage* operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AlterInboundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AlterInboundResponse) */ {
 public:
  inline AlterInboundResponse() : AlterInboundResponse(nullptr) {}
  virtual ~AlterInboundResponse();
  explicit constexpr AlterInboundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterInboundResponse(const AlterInboundResponse& from);
  AlterInboundResponse(AlterInboundResponse&& from) noexcept
    : AlterInboundResponse() {
    *this = ::std::move(from);
  }

  inline AlterInboundResponse& operator=(const AlterInboundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterInboundResponse& operator=(AlterInboundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlterInboundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterInboundResponse* internal_default_instance() {
    return reinterpret_cast<const AlterInboundResponse*>(
               &_AlterInboundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AlterInboundResponse& a, AlterInboundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterInboundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterInboundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlterInboundResponse* New() const final {
    return CreateMaybeMessage<AlterInboundResponse>(nullptr);
  }

  AlterInboundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlterInboundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlterInboundResponse& from);
  void MergeFrom(const AlterInboundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterInboundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AlterInboundResponse";
  }
  protected:
  explicit AlterInboundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AlterInboundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AddOutboundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AddOutboundRequest) */ {
 public:
  inline AddOutboundRequest() : AddOutboundRequest(nullptr) {}
  virtual ~AddOutboundRequest();
  explicit constexpr AddOutboundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOutboundRequest(const AddOutboundRequest& from);
  AddOutboundRequest(AddOutboundRequest&& from) noexcept
    : AddOutboundRequest() {
    *this = ::std::move(from);
  }

  inline AddOutboundRequest& operator=(const AddOutboundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOutboundRequest& operator=(AddOutboundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOutboundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOutboundRequest* internal_default_instance() {
    return reinterpret_cast<const AddOutboundRequest*>(
               &_AddOutboundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddOutboundRequest& a, AddOutboundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOutboundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOutboundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOutboundRequest* New() const final {
    return CreateMaybeMessage<AddOutboundRequest>(nullptr);
  }

  AddOutboundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOutboundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOutboundRequest& from);
  void MergeFrom(const AddOutboundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOutboundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AddOutboundRequest";
  }
  protected:
  explicit AddOutboundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutboundFieldNumber = 1,
  };
  // .v2ray.core.OutboundHandlerConfig outbound = 1;
  bool has_outbound() const;
  private:
  bool _internal_has_outbound() const;
  public:
  void clear_outbound();
  const ::v2ray::core::OutboundHandlerConfig& outbound() const;
  ::v2ray::core::OutboundHandlerConfig* release_outbound();
  ::v2ray::core::OutboundHandlerConfig* mutable_outbound();
  void set_allocated_outbound(::v2ray::core::OutboundHandlerConfig* outbound);
  private:
  const ::v2ray::core::OutboundHandlerConfig& _internal_outbound() const;
  ::v2ray::core::OutboundHandlerConfig* _internal_mutable_outbound();
  public:
  void unsafe_arena_set_allocated_outbound(
      ::v2ray::core::OutboundHandlerConfig* outbound);
  ::v2ray::core::OutboundHandlerConfig* unsafe_arena_release_outbound();

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AddOutboundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v2ray::core::OutboundHandlerConfig* outbound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AddOutboundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AddOutboundResponse) */ {
 public:
  inline AddOutboundResponse() : AddOutboundResponse(nullptr) {}
  virtual ~AddOutboundResponse();
  explicit constexpr AddOutboundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOutboundResponse(const AddOutboundResponse& from);
  AddOutboundResponse(AddOutboundResponse&& from) noexcept
    : AddOutboundResponse() {
    *this = ::std::move(from);
  }

  inline AddOutboundResponse& operator=(const AddOutboundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOutboundResponse& operator=(AddOutboundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOutboundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOutboundResponse* internal_default_instance() {
    return reinterpret_cast<const AddOutboundResponse*>(
               &_AddOutboundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddOutboundResponse& a, AddOutboundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOutboundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOutboundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOutboundResponse* New() const final {
    return CreateMaybeMessage<AddOutboundResponse>(nullptr);
  }

  AddOutboundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOutboundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOutboundResponse& from);
  void MergeFrom(const AddOutboundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOutboundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AddOutboundResponse";
  }
  protected:
  explicit AddOutboundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AddOutboundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class RemoveOutboundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.RemoveOutboundRequest) */ {
 public:
  inline RemoveOutboundRequest() : RemoveOutboundRequest(nullptr) {}
  virtual ~RemoveOutboundRequest();
  explicit constexpr RemoveOutboundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOutboundRequest(const RemoveOutboundRequest& from);
  RemoveOutboundRequest(RemoveOutboundRequest&& from) noexcept
    : RemoveOutboundRequest() {
    *this = ::std::move(from);
  }

  inline RemoveOutboundRequest& operator=(const RemoveOutboundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOutboundRequest& operator=(RemoveOutboundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOutboundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOutboundRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveOutboundRequest*>(
               &_RemoveOutboundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveOutboundRequest& a, RemoveOutboundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOutboundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOutboundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOutboundRequest* New() const final {
    return CreateMaybeMessage<RemoveOutboundRequest>(nullptr);
  }

  RemoveOutboundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOutboundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOutboundRequest& from);
  void MergeFrom(const RemoveOutboundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOutboundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.RemoveOutboundRequest";
  }
  protected:
  explicit RemoveOutboundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.RemoveOutboundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class RemoveOutboundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.RemoveOutboundResponse) */ {
 public:
  inline RemoveOutboundResponse() : RemoveOutboundResponse(nullptr) {}
  virtual ~RemoveOutboundResponse();
  explicit constexpr RemoveOutboundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOutboundResponse(const RemoveOutboundResponse& from);
  RemoveOutboundResponse(RemoveOutboundResponse&& from) noexcept
    : RemoveOutboundResponse() {
    *this = ::std::move(from);
  }

  inline RemoveOutboundResponse& operator=(const RemoveOutboundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOutboundResponse& operator=(RemoveOutboundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOutboundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOutboundResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveOutboundResponse*>(
               &_RemoveOutboundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RemoveOutboundResponse& a, RemoveOutboundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOutboundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOutboundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOutboundResponse* New() const final {
    return CreateMaybeMessage<RemoveOutboundResponse>(nullptr);
  }

  RemoveOutboundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOutboundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOutboundResponse& from);
  void MergeFrom(const RemoveOutboundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOutboundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.RemoveOutboundResponse";
  }
  protected:
  explicit RemoveOutboundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.RemoveOutboundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AlterOutboundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AlterOutboundRequest) */ {
 public:
  inline AlterOutboundRequest() : AlterOutboundRequest(nullptr) {}
  virtual ~AlterOutboundRequest();
  explicit constexpr AlterOutboundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterOutboundRequest(const AlterOutboundRequest& from);
  AlterOutboundRequest(AlterOutboundRequest&& from) noexcept
    : AlterOutboundRequest() {
    *this = ::std::move(from);
  }

  inline AlterOutboundRequest& operator=(const AlterOutboundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterOutboundRequest& operator=(AlterOutboundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlterOutboundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterOutboundRequest* internal_default_instance() {
    return reinterpret_cast<const AlterOutboundRequest*>(
               &_AlterOutboundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AlterOutboundRequest& a, AlterOutboundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterOutboundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterOutboundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlterOutboundRequest* New() const final {
    return CreateMaybeMessage<AlterOutboundRequest>(nullptr);
  }

  AlterOutboundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlterOutboundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlterOutboundRequest& from);
  void MergeFrom(const AlterOutboundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterOutboundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AlterOutboundRequest";
  }
  protected:
  explicit AlterOutboundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .v2ray.core.common.serial.TypedMessage operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const ::v2ray::core::common::serial::TypedMessage& operation() const;
  ::v2ray::core::common::serial::TypedMessage* release_operation();
  ::v2ray::core::common::serial::TypedMessage* mutable_operation();
  void set_allocated_operation(::v2ray::core::common::serial::TypedMessage* operation);
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_operation() const;
  ::v2ray::core::common::serial::TypedMessage* _internal_mutable_operation();
  public:
  void unsafe_arena_set_allocated_operation(
      ::v2ray::core::common::serial::TypedMessage* operation);
  ::v2ray::core::common::serial::TypedMessage* unsafe_arena_release_operation();

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AlterOutboundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::v2ray::core::common::serial::TypedMessage* operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class AlterOutboundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.AlterOutboundResponse) */ {
 public:
  inline AlterOutboundResponse() : AlterOutboundResponse(nullptr) {}
  virtual ~AlterOutboundResponse();
  explicit constexpr AlterOutboundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlterOutboundResponse(const AlterOutboundResponse& from);
  AlterOutboundResponse(AlterOutboundResponse&& from) noexcept
    : AlterOutboundResponse() {
    *this = ::std::move(from);
  }

  inline AlterOutboundResponse& operator=(const AlterOutboundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlterOutboundResponse& operator=(AlterOutboundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlterOutboundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlterOutboundResponse* internal_default_instance() {
    return reinterpret_cast<const AlterOutboundResponse*>(
               &_AlterOutboundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AlterOutboundResponse& a, AlterOutboundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlterOutboundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlterOutboundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlterOutboundResponse* New() const final {
    return CreateMaybeMessage<AlterOutboundResponse>(nullptr);
  }

  AlterOutboundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlterOutboundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlterOutboundResponse& from);
  void MergeFrom(const AlterOutboundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlterOutboundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.AlterOutboundResponse";
  }
  protected:
  explicit AlterOutboundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.AlterOutboundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.app.proxyman.command.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.app.proxyman.command.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_app_2fproxyman_2fcommand_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v2ray.core.app.proxyman.command.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fproxyman_2fcommand_2fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddUserOperation

// .v2ray.core.common.protocol.User user = 1;
inline bool AddUserOperation::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool AddUserOperation::has_user() const {
  return _internal_has_user();
}
inline const ::v2ray::core::common::protocol::User& AddUserOperation::_internal_user() const {
  const ::v2ray::core::common::protocol::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::protocol::User&>(
      ::v2ray::core::common::protocol::_User_default_instance_);
}
inline const ::v2ray::core::common::protocol::User& AddUserOperation::user() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.AddUserOperation.user)
  return _internal_user();
}
inline void AddUserOperation::unsafe_arena_set_allocated_user(
    ::v2ray::core::common::protocol::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.app.proxyman.command.AddUserOperation.user)
}
inline ::v2ray::core::common::protocol::User* AddUserOperation::release_user() {
  
  ::v2ray::core::common::protocol::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::protocol::User* AddUserOperation::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.AddUserOperation.user)
  
  ::v2ray::core::common::protocol::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::protocol::User* AddUserOperation::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::protocol::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::v2ray::core::common::protocol::User* AddUserOperation::mutable_user() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.AddUserOperation.user)
  return _internal_mutable_user();
}
inline void AddUserOperation::set_allocated_user(::v2ray::core::common::protocol::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user)->GetArena();
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.AddUserOperation.user)
}

// -------------------------------------------------------------------

// RemoveUserOperation

// string email = 1;
inline void RemoveUserOperation::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& RemoveUserOperation::email() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
  return _internal_email();
}
inline void RemoveUserOperation::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
}
inline std::string* RemoveUserOperation::mutable_email() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
  return _internal_mutable_email();
}
inline const std::string& RemoveUserOperation::_internal_email() const {
  return email_.Get();
}
inline void RemoveUserOperation::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveUserOperation::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
}
inline void RemoveUserOperation::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
}
inline void RemoveUserOperation::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
}
inline std::string* RemoveUserOperation::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveUserOperation::release_email() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveUserOperation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.RemoveUserOperation.email)
}

// -------------------------------------------------------------------

// AddInboundRequest

// .v2ray.core.InboundHandlerConfig inbound = 1;
inline bool AddInboundRequest::_internal_has_inbound() const {
  return this != internal_default_instance() && inbound_ != nullptr;
}
inline bool AddInboundRequest::has_inbound() const {
  return _internal_has_inbound();
}
inline const ::v2ray::core::InboundHandlerConfig& AddInboundRequest::_internal_inbound() const {
  const ::v2ray::core::InboundHandlerConfig* p = inbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::InboundHandlerConfig&>(
      ::v2ray::core::_InboundHandlerConfig_default_instance_);
}
inline const ::v2ray::core::InboundHandlerConfig& AddInboundRequest::inbound() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.AddInboundRequest.inbound)
  return _internal_inbound();
}
inline void AddInboundRequest::unsafe_arena_set_allocated_inbound(
    ::v2ray::core::InboundHandlerConfig* inbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inbound_);
  }
  inbound_ = inbound;
  if (inbound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.app.proxyman.command.AddInboundRequest.inbound)
}
inline ::v2ray::core::InboundHandlerConfig* AddInboundRequest::release_inbound() {
  
  ::v2ray::core::InboundHandlerConfig* temp = inbound_;
  inbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::InboundHandlerConfig* AddInboundRequest::unsafe_arena_release_inbound() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.AddInboundRequest.inbound)
  
  ::v2ray::core::InboundHandlerConfig* temp = inbound_;
  inbound_ = nullptr;
  return temp;
}
inline ::v2ray::core::InboundHandlerConfig* AddInboundRequest::_internal_mutable_inbound() {
  
  if (inbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::InboundHandlerConfig>(GetArena());
    inbound_ = p;
  }
  return inbound_;
}
inline ::v2ray::core::InboundHandlerConfig* AddInboundRequest::mutable_inbound() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.AddInboundRequest.inbound)
  return _internal_mutable_inbound();
}
inline void AddInboundRequest::set_allocated_inbound(::v2ray::core::InboundHandlerConfig* inbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inbound_);
  }
  if (inbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inbound)->GetArena();
    if (message_arena != submessage_arena) {
      inbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inbound, submessage_arena);
    }
    
  } else {
    
  }
  inbound_ = inbound;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.AddInboundRequest.inbound)
}

// -------------------------------------------------------------------

// AddInboundResponse

// -------------------------------------------------------------------

// RemoveInboundRequest

// string tag = 1;
inline void RemoveInboundRequest::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& RemoveInboundRequest::tag() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
  return _internal_tag();
}
inline void RemoveInboundRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
}
inline std::string* RemoveInboundRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& RemoveInboundRequest::_internal_tag() const {
  return tag_.Get();
}
inline void RemoveInboundRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveInboundRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
}
inline void RemoveInboundRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
}
inline void RemoveInboundRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
}
inline std::string* RemoveInboundRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveInboundRequest::release_tag() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveInboundRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.RemoveInboundRequest.tag)
}

// -------------------------------------------------------------------

// RemoveInboundResponse

// -------------------------------------------------------------------

// AlterInboundRequest

// string tag = 1;
inline void AlterInboundRequest::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& AlterInboundRequest::tag() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
  return _internal_tag();
}
inline void AlterInboundRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
}
inline std::string* AlterInboundRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& AlterInboundRequest::_internal_tag() const {
  return tag_.Get();
}
inline void AlterInboundRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlterInboundRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
}
inline void AlterInboundRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
}
inline void AlterInboundRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
}
inline std::string* AlterInboundRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlterInboundRequest::release_tag() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlterInboundRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.AlterInboundRequest.tag)
}

// .v2ray.core.common.serial.TypedMessage operation = 2;
inline bool AlterInboundRequest::_internal_has_operation() const {
  return this != internal_default_instance() && operation_ != nullptr;
}
inline bool AlterInboundRequest::has_operation() const {
  return _internal_has_operation();
}
inline const ::v2ray::core::common::serial::TypedMessage& AlterInboundRequest::_internal_operation() const {
  const ::v2ray::core::common::serial::TypedMessage* p = operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::serial::TypedMessage&>(
      ::v2ray::core::common::serial::_TypedMessage_default_instance_);
}
inline const ::v2ray::core::common::serial::TypedMessage& AlterInboundRequest::operation() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.AlterInboundRequest.operation)
  return _internal_operation();
}
inline void AlterInboundRequest::unsafe_arena_set_allocated_operation(
    ::v2ray::core::common::serial::TypedMessage* operation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_);
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.app.proxyman.command.AlterInboundRequest.operation)
}
inline ::v2ray::core::common::serial::TypedMessage* AlterInboundRequest::release_operation() {
  
  ::v2ray::core::common::serial::TypedMessage* temp = operation_;
  operation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* AlterInboundRequest::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.AlterInboundRequest.operation)
  
  ::v2ray::core::common::serial::TypedMessage* temp = operation_;
  operation_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* AlterInboundRequest::_internal_mutable_operation() {
  
  if (operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::serial::TypedMessage>(GetArena());
    operation_ = p;
  }
  return operation_;
}
inline ::v2ray::core::common::serial::TypedMessage* AlterInboundRequest::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.AlterInboundRequest.operation)
  return _internal_mutable_operation();
}
inline void AlterInboundRequest::set_allocated_operation(::v2ray::core::common::serial::TypedMessage* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_);
  }
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation)->GetArena();
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.AlterInboundRequest.operation)
}

// -------------------------------------------------------------------

// AlterInboundResponse

// -------------------------------------------------------------------

// AddOutboundRequest

// .v2ray.core.OutboundHandlerConfig outbound = 1;
inline bool AddOutboundRequest::_internal_has_outbound() const {
  return this != internal_default_instance() && outbound_ != nullptr;
}
inline bool AddOutboundRequest::has_outbound() const {
  return _internal_has_outbound();
}
inline const ::v2ray::core::OutboundHandlerConfig& AddOutboundRequest::_internal_outbound() const {
  const ::v2ray::core::OutboundHandlerConfig* p = outbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::OutboundHandlerConfig&>(
      ::v2ray::core::_OutboundHandlerConfig_default_instance_);
}
inline const ::v2ray::core::OutboundHandlerConfig& AddOutboundRequest::outbound() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.AddOutboundRequest.outbound)
  return _internal_outbound();
}
inline void AddOutboundRequest::unsafe_arena_set_allocated_outbound(
    ::v2ray::core::OutboundHandlerConfig* outbound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outbound_);
  }
  outbound_ = outbound;
  if (outbound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.app.proxyman.command.AddOutboundRequest.outbound)
}
inline ::v2ray::core::OutboundHandlerConfig* AddOutboundRequest::release_outbound() {
  
  ::v2ray::core::OutboundHandlerConfig* temp = outbound_;
  outbound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::OutboundHandlerConfig* AddOutboundRequest::unsafe_arena_release_outbound() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.AddOutboundRequest.outbound)
  
  ::v2ray::core::OutboundHandlerConfig* temp = outbound_;
  outbound_ = nullptr;
  return temp;
}
inline ::v2ray::core::OutboundHandlerConfig* AddOutboundRequest::_internal_mutable_outbound() {
  
  if (outbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::OutboundHandlerConfig>(GetArena());
    outbound_ = p;
  }
  return outbound_;
}
inline ::v2ray::core::OutboundHandlerConfig* AddOutboundRequest::mutable_outbound() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.AddOutboundRequest.outbound)
  return _internal_mutable_outbound();
}
inline void AddOutboundRequest::set_allocated_outbound(::v2ray::core::OutboundHandlerConfig* outbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outbound_);
  }
  if (outbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outbound)->GetArena();
    if (message_arena != submessage_arena) {
      outbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outbound, submessage_arena);
    }
    
  } else {
    
  }
  outbound_ = outbound;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.AddOutboundRequest.outbound)
}

// -------------------------------------------------------------------

// AddOutboundResponse

// -------------------------------------------------------------------

// RemoveOutboundRequest

// string tag = 1;
inline void RemoveOutboundRequest::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& RemoveOutboundRequest::tag() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
  return _internal_tag();
}
inline void RemoveOutboundRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
}
inline std::string* RemoveOutboundRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& RemoveOutboundRequest::_internal_tag() const {
  return tag_.Get();
}
inline void RemoveOutboundRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveOutboundRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
}
inline void RemoveOutboundRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
}
inline void RemoveOutboundRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
}
inline std::string* RemoveOutboundRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveOutboundRequest::release_tag() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOutboundRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.RemoveOutboundRequest.tag)
}

// -------------------------------------------------------------------

// RemoveOutboundResponse

// -------------------------------------------------------------------

// AlterOutboundRequest

// string tag = 1;
inline void AlterOutboundRequest::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& AlterOutboundRequest::tag() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
  return _internal_tag();
}
inline void AlterOutboundRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
}
inline std::string* AlterOutboundRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& AlterOutboundRequest::_internal_tag() const {
  return tag_.Get();
}
inline void AlterOutboundRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlterOutboundRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
}
inline void AlterOutboundRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
}
inline void AlterOutboundRequest::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
}
inline std::string* AlterOutboundRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlterOutboundRequest::release_tag() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlterOutboundRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.AlterOutboundRequest.tag)
}

// .v2ray.core.common.serial.TypedMessage operation = 2;
inline bool AlterOutboundRequest::_internal_has_operation() const {
  return this != internal_default_instance() && operation_ != nullptr;
}
inline bool AlterOutboundRequest::has_operation() const {
  return _internal_has_operation();
}
inline const ::v2ray::core::common::serial::TypedMessage& AlterOutboundRequest::_internal_operation() const {
  const ::v2ray::core::common::serial::TypedMessage* p = operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::serial::TypedMessage&>(
      ::v2ray::core::common::serial::_TypedMessage_default_instance_);
}
inline const ::v2ray::core::common::serial::TypedMessage& AlterOutboundRequest::operation() const {
  // @@protoc_insertion_point(field_get:v2ray.core.app.proxyman.command.AlterOutboundRequest.operation)
  return _internal_operation();
}
inline void AlterOutboundRequest::unsafe_arena_set_allocated_operation(
    ::v2ray::core::common::serial::TypedMessage* operation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_);
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.app.proxyman.command.AlterOutboundRequest.operation)
}
inline ::v2ray::core::common::serial::TypedMessage* AlterOutboundRequest::release_operation() {
  
  ::v2ray::core::common::serial::TypedMessage* temp = operation_;
  operation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* AlterOutboundRequest::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_release:v2ray.core.app.proxyman.command.AlterOutboundRequest.operation)
  
  ::v2ray::core::common::serial::TypedMessage* temp = operation_;
  operation_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* AlterOutboundRequest::_internal_mutable_operation() {
  
  if (operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::serial::TypedMessage>(GetArena());
    operation_ = p;
  }
  return operation_;
}
inline ::v2ray::core::common::serial::TypedMessage* AlterOutboundRequest::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.app.proxyman.command.AlterOutboundRequest.operation)
  return _internal_mutable_operation();
}
inline void AlterOutboundRequest::set_allocated_operation(::v2ray::core::common::serial::TypedMessage* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_);
  }
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation)->GetArena();
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.app.proxyman.command.AlterOutboundRequest.operation)
}

// -------------------------------------------------------------------

// AlterOutboundResponse

// -------------------------------------------------------------------

// Config

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace command
}  // namespace proxyman
}  // namespace app
}  // namespace core
}  // namespace v2ray

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fproxyman_2fcommand_2fcommand_2eproto
