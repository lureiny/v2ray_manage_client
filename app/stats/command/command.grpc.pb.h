// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/stats/command/command.proto
#ifndef GRPC_app_2fstats_2fcommand_2fcommand_2eproto__INCLUDED
#define GRPC_app_2fstats_2fcommand_2fcommand_2eproto__INCLUDED

#include "app/stats/command/command.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace v2ray {
namespace core {
namespace app {
namespace stats {
namespace command {

class StatsService final {
 public:
  static constexpr char const* service_full_name() {
    return "v2ray.core.app.stats.command.StatsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::v2ray::core::app::stats::command::GetStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::GetStatsResponse>> AsyncGetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::GetStatsResponse>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::GetStatsResponse>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::GetStatsResponse>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::v2ray::core::app::stats::command::QueryStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::QueryStatsResponse>> AsyncQueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::QueryStatsResponse>>(AsyncQueryStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::QueryStatsResponse>> PrepareAsyncQueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::QueryStatsResponse>>(PrepareAsyncQueryStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::v2ray::core::app::stats::command::SysStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::SysStatsResponse>> AsyncGetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::SysStatsResponse>>(AsyncGetSysStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::SysStatsResponse>> PrepareAsyncGetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::SysStatsResponse>>(PrepareAsyncGetSysStatsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::GetStatsResponse>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::GetStatsResponse>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::QueryStatsResponse>* AsyncQueryStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::QueryStatsResponse>* PrepareAsyncQueryStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::SysStatsResponse>* AsyncGetSysStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v2ray::core::app::stats::command::SysStatsResponse>* PrepareAsyncGetSysStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::v2ray::core::app::stats::command::GetStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::GetStatsResponse>> AsyncGetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::GetStatsResponse>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::GetStatsResponse>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::GetStatsResponse>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    ::grpc::Status QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::v2ray::core::app::stats::command::QueryStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::QueryStatsResponse>> AsyncQueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::QueryStatsResponse>>(AsyncQueryStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::QueryStatsResponse>> PrepareAsyncQueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::QueryStatsResponse>>(PrepareAsyncQueryStatsRaw(context, request, cq));
    }
    ::grpc::Status GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::v2ray::core::app::stats::command::SysStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::SysStatsResponse>> AsyncGetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::SysStatsResponse>>(AsyncGetSysStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::SysStatsResponse>> PrepareAsyncGetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::SysStatsResponse>>(PrepareAsyncGetSysStatsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSysStats(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::GetStatsResponse>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::GetStatsResponse>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::QueryStatsResponse>* AsyncQueryStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::QueryStatsResponse>* PrepareAsyncQueryStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::SysStatsResponse>* AsyncGetSysStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v2ray::core::app::stats::command::SysStatsResponse>* PrepareAsyncGetSysStatsRaw(::grpc::ClientContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStats_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryStats_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSysStats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStats(::grpc::ServerContext* context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response);
    virtual ::grpc::Status QueryStats(::grpc::ServerContext* context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response);
    virtual ::grpc::Status GetSysStats(::grpc::ServerContext* context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStats() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::v2ray::core::app::stats::command::GetStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::v2ray::core::app::stats::command::GetStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryStats() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryStats(::grpc::ServerContext* context, ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::v2ray::core::app::stats::command::QueryStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSysStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSysStats() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSysStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSysStats(::grpc::ServerContext* context, ::v2ray::core::app::stats::command::SysStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::v2ray::core::app::stats::command::SysStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStats<WithAsyncMethod_QueryStats<WithAsyncMethod_GetSysStats<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::v2ray::core::app::stats::command::GetStatsRequest, ::v2ray::core::app::stats::command::GetStatsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::v2ray::core::app::stats::command::GetStatsRequest* request, ::v2ray::core::app::stats::command::GetStatsResponse* response) { return this->GetStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetStats(
        ::grpc::experimental::MessageAllocator< ::v2ray::core::app::stats::command::GetStatsRequest, ::v2ray::core::app::stats::command::GetStatsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v2ray::core::app::stats::command::GetStatsRequest, ::v2ray::core::app::stats::command::GetStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::v2ray::core::app::stats::command::QueryStatsRequest, ::v2ray::core::app::stats::command::QueryStatsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::v2ray::core::app::stats::command::QueryStatsRequest* request, ::v2ray::core::app::stats::command::QueryStatsResponse* response) { return this->QueryStats(context, request, response); }));}
    void SetMessageAllocatorFor_QueryStats(
        ::grpc::experimental::MessageAllocator< ::v2ray::core::app::stats::command::QueryStatsRequest, ::v2ray::core::app::stats::command::QueryStatsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v2ray::core::app::stats::command::QueryStatsRequest, ::v2ray::core::app::stats::command::QueryStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryStats(
      ::grpc::CallbackServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSysStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSysStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::v2ray::core::app::stats::command::SysStatsRequest, ::v2ray::core::app::stats::command::SysStatsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::v2ray::core::app::stats::command::SysStatsRequest* request, ::v2ray::core::app::stats::command::SysStatsResponse* response) { return this->GetSysStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetSysStats(
        ::grpc::experimental::MessageAllocator< ::v2ray::core::app::stats::command::SysStatsRequest, ::v2ray::core::app::stats::command::SysStatsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v2ray::core::app::stats::command::SysStatsRequest, ::v2ray::core::app::stats::command::SysStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSysStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSysStats(
      ::grpc::CallbackServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSysStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetStats<ExperimentalWithCallbackMethod_QueryStats<ExperimentalWithCallbackMethod_GetSysStats<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetStats<ExperimentalWithCallbackMethod_QueryStats<ExperimentalWithCallbackMethod_GetSysStats<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStats() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryStats() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSysStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSysStats() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSysStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStats() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryStats() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSysStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSysStats() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSysStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSysStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStats(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryStats(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSysStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSysStats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSysStats(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSysStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSysStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSysStats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStats() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v2ray::core::app::stats::command::GetStatsRequest, ::v2ray::core::app::stats::command::GetStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v2ray::core::app::stats::command::GetStatsRequest, ::v2ray::core::app::stats::command::GetStatsResponse>* streamer) {
                       return this->StreamedGetStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::GetStatsRequest* /*request*/, ::v2ray::core::app::stats::command::GetStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v2ray::core::app::stats::command::GetStatsRequest,::v2ray::core::app::stats::command::GetStatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryStats() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v2ray::core::app::stats::command::QueryStatsRequest, ::v2ray::core::app::stats::command::QueryStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v2ray::core::app::stats::command::QueryStatsRequest, ::v2ray::core::app::stats::command::QueryStatsResponse>* streamer) {
                       return this->StreamedQueryStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::QueryStatsRequest* /*request*/, ::v2ray::core::app::stats::command::QueryStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v2ray::core::app::stats::command::QueryStatsRequest,::v2ray::core::app::stats::command::QueryStatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSysStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSysStats() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v2ray::core::app::stats::command::SysStatsRequest, ::v2ray::core::app::stats::command::SysStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v2ray::core::app::stats::command::SysStatsRequest, ::v2ray::core::app::stats::command::SysStatsResponse>* streamer) {
                       return this->StreamedGetSysStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSysStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSysStats(::grpc::ServerContext* /*context*/, const ::v2ray::core::app::stats::command::SysStatsRequest* /*request*/, ::v2ray::core::app::stats::command::SysStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSysStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v2ray::core::app::stats::command::SysStatsRequest,::v2ray::core::app::stats::command::SysStatsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStats<WithStreamedUnaryMethod_QueryStats<WithStreamedUnaryMethod_GetSysStats<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStats<WithStreamedUnaryMethod_QueryStats<WithStreamedUnaryMethod_GetSysStats<Service > > > StreamedService;
};

}  // namespace command
}  // namespace stats
}  // namespace app
}  // namespace core
}  // namespace v2ray


#endif  // GRPC_app_2fstats_2fcommand_2fcommand_2eproto__INCLUDED
