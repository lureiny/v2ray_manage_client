// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_local_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_local_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "redis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_local_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_local_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_local_5fstats_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_local_5fstats_2eproto_metadata_getter(int index);
namespace local {
class History;
struct HistoryDefaultTypeInternal;
extern HistoryDefaultTypeInternal _History_default_instance_;
class LocalStats;
struct LocalStatsDefaultTypeInternal;
extern LocalStatsDefaultTypeInternal _LocalStats_default_instance_;
class Online;
struct OnlineDefaultTypeInternal;
extern OnlineDefaultTypeInternal _Online_default_instance_;
}  // namespace local
PROTOBUF_NAMESPACE_OPEN
template<> ::local::History* Arena::CreateMaybeMessage<::local::History>(Arena*);
template<> ::local::LocalStats* Arena::CreateMaybeMessage<::local::LocalStats>(Arena*);
template<> ::local::Online* Arena::CreateMaybeMessage<::local::Online>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace local {

// ===================================================================

class Online PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:local.Online) */ {
 public:
  inline Online() : Online(nullptr) {}
  virtual ~Online();
  explicit constexpr Online(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Online(const Online& from);
  Online(Online&& from) noexcept
    : Online() {
    *this = ::std::move(from);
  }

  inline Online& operator=(const Online& from) {
    CopyFrom(from);
    return *this;
  }
  inline Online& operator=(Online&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Online& default_instance() {
    return *internal_default_instance();
  }
  static inline const Online* internal_default_instance() {
    return reinterpret_cast<const Online*>(
               &_Online_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Online& a, Online& b) {
    a.Swap(&b);
  }
  inline void Swap(Online* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Online* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Online* New() const final {
    return CreateMaybeMessage<Online>(nullptr);
  }

  Online* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Online>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Online& from);
  void MergeFrom(const Online& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Online* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "local.Online";
  }
  protected:
  explicit Online(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_local_5fstats_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .redis.Stats stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::redis::Stats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >*
      mutable_stats();
  private:
  const ::redis::Stats& _internal_stats(int index) const;
  ::redis::Stats* _internal_add_stats();
  public:
  const ::redis::Stats& stats(int index) const;
  ::redis::Stats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:local.Online)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_local_5fstats_2eproto;
};
// -------------------------------------------------------------------

class History PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:local.History) */ {
 public:
  inline History() : History(nullptr) {}
  virtual ~History();
  explicit constexpr History(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  History(const History& from);
  History(History&& from) noexcept
    : History() {
    *this = ::std::move(from);
  }

  inline History& operator=(const History& from) {
    CopyFrom(from);
    return *this;
  }
  inline History& operator=(History&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const History& default_instance() {
    return *internal_default_instance();
  }
  static inline const History* internal_default_instance() {
    return reinterpret_cast<const History*>(
               &_History_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(History& a, History& b) {
    a.Swap(&b);
  }
  inline void Swap(History* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(History* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline History* New() const final {
    return CreateMaybeMessage<History>(nullptr);
  }

  History* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<History>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const History& from);
  void MergeFrom(const History& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(History* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "local.History";
  }
  protected:
  explicit History(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_local_5fstats_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .redis.Stats stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::redis::Stats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >*
      mutable_stats();
  private:
  const ::redis::Stats& _internal_stats(int index) const;
  ::redis::Stats* _internal_add_stats();
  public:
  const ::redis::Stats& stats(int index) const;
  ::redis::Stats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:local.History)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_local_5fstats_2eproto;
};
// -------------------------------------------------------------------

class LocalStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:local.LocalStats) */ {
 public:
  inline LocalStats() : LocalStats(nullptr) {}
  virtual ~LocalStats();
  explicit constexpr LocalStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalStats(const LocalStats& from);
  LocalStats(LocalStats&& from) noexcept
    : LocalStats() {
    *this = ::std::move(from);
  }

  inline LocalStats& operator=(const LocalStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalStats& operator=(LocalStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalStats* internal_default_instance() {
    return reinterpret_cast<const LocalStats*>(
               &_LocalStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalStats& a, LocalStats& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalStats* New() const final {
    return CreateMaybeMessage<LocalStats>(nullptr);
  }

  LocalStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalStats& from);
  void MergeFrom(const LocalStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "local.LocalStats";
  }
  protected:
  explicit LocalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_local_5fstats_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineFieldNumber = 1,
    kHistoryFieldNumber = 2,
    kLastStartTimeFieldNumber = 3,
  };
  // .local.Online online = 1;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  const ::local::Online& online() const;
  ::local::Online* release_online();
  ::local::Online* mutable_online();
  void set_allocated_online(::local::Online* online);
  private:
  const ::local::Online& _internal_online() const;
  ::local::Online* _internal_mutable_online();
  public:
  void unsafe_arena_set_allocated_online(
      ::local::Online* online);
  ::local::Online* unsafe_arena_release_online();

  // .local.History history = 2;
  bool has_history() const;
  private:
  bool _internal_has_history() const;
  public:
  void clear_history();
  const ::local::History& history() const;
  ::local::History* release_history();
  ::local::History* mutable_history();
  void set_allocated_history(::local::History* history);
  private:
  const ::local::History& _internal_history() const;
  ::local::History* _internal_mutable_history();
  public:
  void unsafe_arena_set_allocated_history(
      ::local::History* history);
  ::local::History* unsafe_arena_release_history();

  // int64 last_start_time = 3;
  void clear_last_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_start_time() const;
  void set_last_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_start_time() const;
  void _internal_set_last_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:local.LocalStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::local::Online* online_;
  ::local::History* history_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_start_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_local_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Online

// repeated .redis.Stats stats = 1;
inline int Online::_internal_stats_size() const {
  return stats_.size();
}
inline int Online::stats_size() const {
  return _internal_stats_size();
}
inline ::redis::Stats* Online::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:local.Online.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >*
Online::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:local.Online.stats)
  return &stats_;
}
inline const ::redis::Stats& Online::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::redis::Stats& Online::stats(int index) const {
  // @@protoc_insertion_point(field_get:local.Online.stats)
  return _internal_stats(index);
}
inline ::redis::Stats* Online::_internal_add_stats() {
  return stats_.Add();
}
inline ::redis::Stats* Online::add_stats() {
  // @@protoc_insertion_point(field_add:local.Online.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >&
Online::stats() const {
  // @@protoc_insertion_point(field_list:local.Online.stats)
  return stats_;
}

// -------------------------------------------------------------------

// History

// repeated .redis.Stats stats = 1;
inline int History::_internal_stats_size() const {
  return stats_.size();
}
inline int History::stats_size() const {
  return _internal_stats_size();
}
inline ::redis::Stats* History::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:local.History.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >*
History::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:local.History.stats)
  return &stats_;
}
inline const ::redis::Stats& History::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::redis::Stats& History::stats(int index) const {
  // @@protoc_insertion_point(field_get:local.History.stats)
  return _internal_stats(index);
}
inline ::redis::Stats* History::_internal_add_stats() {
  return stats_.Add();
}
inline ::redis::Stats* History::add_stats() {
  // @@protoc_insertion_point(field_add:local.History.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redis::Stats >&
History::stats() const {
  // @@protoc_insertion_point(field_list:local.History.stats)
  return stats_;
}

// -------------------------------------------------------------------

// LocalStats

// .local.Online online = 1;
inline bool LocalStats::_internal_has_online() const {
  return this != internal_default_instance() && online_ != nullptr;
}
inline bool LocalStats::has_online() const {
  return _internal_has_online();
}
inline void LocalStats::clear_online() {
  if (GetArena() == nullptr && online_ != nullptr) {
    delete online_;
  }
  online_ = nullptr;
}
inline const ::local::Online& LocalStats::_internal_online() const {
  const ::local::Online* p = online_;
  return p != nullptr ? *p : reinterpret_cast<const ::local::Online&>(
      ::local::_Online_default_instance_);
}
inline const ::local::Online& LocalStats::online() const {
  // @@protoc_insertion_point(field_get:local.LocalStats.online)
  return _internal_online();
}
inline void LocalStats::unsafe_arena_set_allocated_online(
    ::local::Online* online) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(online_);
  }
  online_ = online;
  if (online) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:local.LocalStats.online)
}
inline ::local::Online* LocalStats::release_online() {
  
  ::local::Online* temp = online_;
  online_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::local::Online* LocalStats::unsafe_arena_release_online() {
  // @@protoc_insertion_point(field_release:local.LocalStats.online)
  
  ::local::Online* temp = online_;
  online_ = nullptr;
  return temp;
}
inline ::local::Online* LocalStats::_internal_mutable_online() {
  
  if (online_ == nullptr) {
    auto* p = CreateMaybeMessage<::local::Online>(GetArena());
    online_ = p;
  }
  return online_;
}
inline ::local::Online* LocalStats::mutable_online() {
  // @@protoc_insertion_point(field_mutable:local.LocalStats.online)
  return _internal_mutable_online();
}
inline void LocalStats::set_allocated_online(::local::Online* online) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete online_;
  }
  if (online) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(online);
    if (message_arena != submessage_arena) {
      online = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, online, submessage_arena);
    }
    
  } else {
    
  }
  online_ = online;
  // @@protoc_insertion_point(field_set_allocated:local.LocalStats.online)
}

// .local.History history = 2;
inline bool LocalStats::_internal_has_history() const {
  return this != internal_default_instance() && history_ != nullptr;
}
inline bool LocalStats::has_history() const {
  return _internal_has_history();
}
inline void LocalStats::clear_history() {
  if (GetArena() == nullptr && history_ != nullptr) {
    delete history_;
  }
  history_ = nullptr;
}
inline const ::local::History& LocalStats::_internal_history() const {
  const ::local::History* p = history_;
  return p != nullptr ? *p : reinterpret_cast<const ::local::History&>(
      ::local::_History_default_instance_);
}
inline const ::local::History& LocalStats::history() const {
  // @@protoc_insertion_point(field_get:local.LocalStats.history)
  return _internal_history();
}
inline void LocalStats::unsafe_arena_set_allocated_history(
    ::local::History* history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(history_);
  }
  history_ = history;
  if (history) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:local.LocalStats.history)
}
inline ::local::History* LocalStats::release_history() {
  
  ::local::History* temp = history_;
  history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::local::History* LocalStats::unsafe_arena_release_history() {
  // @@protoc_insertion_point(field_release:local.LocalStats.history)
  
  ::local::History* temp = history_;
  history_ = nullptr;
  return temp;
}
inline ::local::History* LocalStats::_internal_mutable_history() {
  
  if (history_ == nullptr) {
    auto* p = CreateMaybeMessage<::local::History>(GetArena());
    history_ = p;
  }
  return history_;
}
inline ::local::History* LocalStats::mutable_history() {
  // @@protoc_insertion_point(field_mutable:local.LocalStats.history)
  return _internal_mutable_history();
}
inline void LocalStats::set_allocated_history(::local::History* history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete history_;
  }
  if (history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(history);
    if (message_arena != submessage_arena) {
      history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history, submessage_arena);
    }
    
  } else {
    
  }
  history_ = history;
  // @@protoc_insertion_point(field_set_allocated:local.LocalStats.history)
}

// int64 last_start_time = 3;
inline void LocalStats::clear_last_start_time() {
  last_start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocalStats::_internal_last_start_time() const {
  return last_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocalStats::last_start_time() const {
  // @@protoc_insertion_point(field_get:local.LocalStats.last_start_time)
  return _internal_last_start_time();
}
inline void LocalStats::_internal_set_last_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_start_time_ = value;
}
inline void LocalStats::set_last_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_start_time(value);
  // @@protoc_insertion_point(field_set:local.LocalStats.last_start_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace local

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_local_5fstats_2eproto
