// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v2ray {
namespace core {
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inbound_()
  , outbound_()
  , app_()
  , extension_()
  , transport_(nullptr){}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
constexpr InboundHandlerConfig::InboundHandlerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_settings_(nullptr)
  , proxy_settings_(nullptr){}
struct InboundHandlerConfigDefaultTypeInternal {
  constexpr InboundHandlerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InboundHandlerConfigDefaultTypeInternal() {}
  union {
    InboundHandlerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InboundHandlerConfigDefaultTypeInternal _InboundHandlerConfig_default_instance_;
constexpr OutboundHandlerConfig::OutboundHandlerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , comment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_settings_(nullptr)
  , proxy_settings_(nullptr)
  , expire_(PROTOBUF_LONGLONG(0)){}
struct OutboundHandlerConfigDefaultTypeInternal {
  constexpr OutboundHandlerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutboundHandlerConfigDefaultTypeInternal() {}
  union {
    OutboundHandlerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutboundHandlerConfigDefaultTypeInternal _OutboundHandlerConfig_default_instance_;
}  // namespace core
}  // namespace v2ray
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_config_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::Config, inbound_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::Config, outbound_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::Config, app_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::Config, transport_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::Config, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::InboundHandlerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::InboundHandlerConfig, tag_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::InboundHandlerConfig, receiver_settings_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::InboundHandlerConfig, proxy_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::OutboundHandlerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::OutboundHandlerConfig, tag_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::OutboundHandlerConfig, sender_settings_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::OutboundHandlerConfig, proxy_settings_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::OutboundHandlerConfig, expire_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::OutboundHandlerConfig, comment_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v2ray::core::Config)},
  { 10, -1, sizeof(::v2ray::core::InboundHandlerConfig)},
  { 18, -1, sizeof(::v2ray::core::OutboundHandlerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::_InboundHandlerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::_OutboundHandlerConfig_default_instance_),
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\nv2ray.core\032!common/seria"
  "l/typed_message.proto\032\026transport/config."
  "proto\"\233\002\n\006Config\0221\n\007inbound\030\001 \003(\0132 .v2ra"
  "y.core.InboundHandlerConfig\0223\n\010outbound\030"
  "\002 \003(\0132!.v2ray.core.OutboundHandlerConfig"
  "\0223\n\003app\030\004 \003(\0132&.v2ray.core.common.serial"
  ".TypedMessage\0223\n\ttransport\030\005 \001(\0132\034.v2ray"
  ".core.transport.ConfigB\002\030\001\0229\n\textension\030"
  "\006 \003(\0132&.v2ray.core.common.serial.TypedMe"
  "ssageJ\004\010\003\020\004\"\246\001\n\024InboundHandlerConfig\022\013\n\003"
  "tag\030\001 \001(\t\022A\n\021receiver_settings\030\002 \001(\0132&.v"
  "2ray.core.common.serial.TypedMessage\022>\n\016"
  "proxy_settings\030\003 \001(\0132&.v2ray.core.common"
  ".serial.TypedMessage\"\306\001\n\025OutboundHandler"
  "Config\022\013\n\003tag\030\001 \001(\t\022\?\n\017sender_settings\030\002"
  " \001(\0132&.v2ray.core.common.serial.TypedMes"
  "sage\022>\n\016proxy_settings\030\003 \001(\0132&.v2ray.cor"
  "e.common.serial.TypedMessage\022\016\n\006expire\030\004"
  " \001(\003\022\017\n\007comment\030\005 \001(\tBD\n\016com.v2ray.coreP"
  "\001Z#github.com/v2fly/v2ray-core/v4;core\252\002"
  "\nV2Ray.Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_2eproto_deps[2] = {
  &::descriptor_table_common_2fserial_2ftyped_5fmessage_2eproto,
  &::descriptor_table_transport_2fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto = {
  false, false, 819, descriptor_table_protodef_config_2eproto, "config.proto", 
  &descriptor_table_config_2eproto_once, descriptor_table_config_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_config_2eproto::offsets,
  file_level_metadata_config_2eproto, file_level_enum_descriptors_config_2eproto, file_level_service_descriptors_config_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_config_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return descriptor_table_config_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_config_2eproto(&descriptor_table_config_2eproto);
namespace v2ray {
namespace core {

// ===================================================================

class Config::_Internal {
 public:
  static const ::v2ray::core::transport::Config& transport(const Config* msg);
};

const ::v2ray::core::transport::Config&
Config::_Internal::transport(const Config* msg) {
  return *msg->transport_;
}
void Config::clear_app() {
  app_.Clear();
}
void Config::clear_transport() {
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
void Config::clear_extension() {
  extension_.Clear();
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inbound_(arena),
  outbound_(arena),
  app_(arena),
  extension_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inbound_(from.inbound_),
      outbound_(from.outbound_),
      app_(from.app_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transport()) {
    transport_ = new ::v2ray::core::transport::Config(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v2ray.core.Config)
}

void Config::SharedCtor() {
transport_ = nullptr;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:v2ray.core.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transport_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inbound_.Clear();
  outbound_.Clear();
  app_.Clear();
  extension_.Clear();
  if (GetArena() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .v2ray.core.InboundHandlerConfig inbound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inbound(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .v2ray.core.OutboundHandlerConfig outbound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outbound(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .v2ray.core.common.serial.TypedMessage app = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .v2ray.core.transport.Config transport = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .v2ray.core.common.serial.TypedMessage extension = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v2ray.core.InboundHandlerConfig inbound = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inbound_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inbound(i), target, stream);
  }

  // repeated .v2ray.core.OutboundHandlerConfig outbound = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outbound_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outbound(i), target, stream);
  }

  // repeated .v2ray.core.common.serial.TypedMessage app = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_app(i), target, stream);
  }

  // .v2ray.core.transport.Config transport = 5 [deprecated = true];
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::transport(this), target, stream);
  }

  // repeated .v2ray.core.common.serial.TypedMessage extension = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v2ray.core.InboundHandlerConfig inbound = 1;
  total_size += 1UL * this->_internal_inbound_size();
  for (const auto& msg : this->inbound_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v2ray.core.OutboundHandlerConfig outbound = 2;
  total_size += 1UL * this->_internal_outbound_size();
  for (const auto& msg : this->outbound_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v2ray.core.common.serial.TypedMessage app = 4;
  total_size += 1UL * this->_internal_app_size();
  for (const auto& msg : this->app_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v2ray.core.common.serial.TypedMessage extension = 6;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v2ray.core.transport.Config transport = 5 [deprecated = true];
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inbound_.MergeFrom(from.inbound_);
  outbound_.MergeFrom(from.outbound_);
  app_.MergeFrom(from.app_);
  extension_.MergeFrom(from.extension_);
  if (from.has_transport()) {
    _internal_mutable_transport()->::v2ray::core::transport::Config::MergeFrom(from._internal_transport());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inbound_.InternalSwap(&other->inbound_);
  outbound_.InternalSwap(&other->outbound_);
  app_.InternalSwap(&other->app_);
  extension_.InternalSwap(&other->extension_);
  swap(transport_, other->transport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InboundHandlerConfig::_Internal {
 public:
  static const ::v2ray::core::common::serial::TypedMessage& receiver_settings(const InboundHandlerConfig* msg);
  static const ::v2ray::core::common::serial::TypedMessage& proxy_settings(const InboundHandlerConfig* msg);
};

const ::v2ray::core::common::serial::TypedMessage&
InboundHandlerConfig::_Internal::receiver_settings(const InboundHandlerConfig* msg) {
  return *msg->receiver_settings_;
}
const ::v2ray::core::common::serial::TypedMessage&
InboundHandlerConfig::_Internal::proxy_settings(const InboundHandlerConfig* msg) {
  return *msg->proxy_settings_;
}
void InboundHandlerConfig::clear_receiver_settings() {
  if (GetArena() == nullptr && receiver_settings_ != nullptr) {
    delete receiver_settings_;
  }
  receiver_settings_ = nullptr;
}
void InboundHandlerConfig::clear_proxy_settings() {
  if (GetArena() == nullptr && proxy_settings_ != nullptr) {
    delete proxy_settings_;
  }
  proxy_settings_ = nullptr;
}
InboundHandlerConfig::InboundHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.InboundHandlerConfig)
}
InboundHandlerConfig::InboundHandlerConfig(const InboundHandlerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  if (from._internal_has_receiver_settings()) {
    receiver_settings_ = new ::v2ray::core::common::serial::TypedMessage(*from.receiver_settings_);
  } else {
    receiver_settings_ = nullptr;
  }
  if (from._internal_has_proxy_settings()) {
    proxy_settings_ = new ::v2ray::core::common::serial::TypedMessage(*from.proxy_settings_);
  } else {
    proxy_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v2ray.core.InboundHandlerConfig)
}

void InboundHandlerConfig::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&receiver_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proxy_settings_) -
    reinterpret_cast<char*>(&receiver_settings_)) + sizeof(proxy_settings_));
}

InboundHandlerConfig::~InboundHandlerConfig() {
  // @@protoc_insertion_point(destructor:v2ray.core.InboundHandlerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InboundHandlerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete receiver_settings_;
  if (this != internal_default_instance()) delete proxy_settings_;
}

void InboundHandlerConfig::ArenaDtor(void* object) {
  InboundHandlerConfig* _this = reinterpret_cast< InboundHandlerConfig* >(object);
  (void)_this;
}
void InboundHandlerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InboundHandlerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InboundHandlerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.InboundHandlerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  if (GetArena() == nullptr && receiver_settings_ != nullptr) {
    delete receiver_settings_;
  }
  receiver_settings_ = nullptr;
  if (GetArena() == nullptr && proxy_settings_ != nullptr) {
    delete proxy_settings_;
  }
  proxy_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InboundHandlerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v2ray.core.InboundHandlerConfig.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v2ray.core.common.serial.TypedMessage receiver_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxy_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InboundHandlerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.InboundHandlerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v2ray.core.InboundHandlerConfig.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // .v2ray.core.common.serial.TypedMessage receiver_settings = 2;
  if (this->has_receiver_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::receiver_settings(this), target, stream);
  }

  // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
  if (this->has_proxy_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::proxy_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.InboundHandlerConfig)
  return target;
}

size_t InboundHandlerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.InboundHandlerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // .v2ray.core.common.serial.TypedMessage receiver_settings = 2;
  if (this->has_receiver_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_settings_);
  }

  // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
  if (this->has_proxy_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proxy_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InboundHandlerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.InboundHandlerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InboundHandlerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InboundHandlerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.InboundHandlerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.InboundHandlerConfig)
    MergeFrom(*source);
  }
}

void InboundHandlerConfig::MergeFrom(const InboundHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.InboundHandlerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.has_receiver_settings()) {
    _internal_mutable_receiver_settings()->::v2ray::core::common::serial::TypedMessage::MergeFrom(from._internal_receiver_settings());
  }
  if (from.has_proxy_settings()) {
    _internal_mutable_proxy_settings()->::v2ray::core::common::serial::TypedMessage::MergeFrom(from._internal_proxy_settings());
  }
}

void InboundHandlerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.InboundHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboundHandlerConfig::CopyFrom(const InboundHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.InboundHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundHandlerConfig::IsInitialized() const {
  return true;
}

void InboundHandlerConfig::InternalSwap(InboundHandlerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, proxy_settings_)
      + sizeof(InboundHandlerConfig::proxy_settings_)
      - PROTOBUF_FIELD_OFFSET(InboundHandlerConfig, receiver_settings_)>(
          reinterpret_cast<char*>(&receiver_settings_),
          reinterpret_cast<char*>(&other->receiver_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InboundHandlerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OutboundHandlerConfig::_Internal {
 public:
  static const ::v2ray::core::common::serial::TypedMessage& sender_settings(const OutboundHandlerConfig* msg);
  static const ::v2ray::core::common::serial::TypedMessage& proxy_settings(const OutboundHandlerConfig* msg);
};

const ::v2ray::core::common::serial::TypedMessage&
OutboundHandlerConfig::_Internal::sender_settings(const OutboundHandlerConfig* msg) {
  return *msg->sender_settings_;
}
const ::v2ray::core::common::serial::TypedMessage&
OutboundHandlerConfig::_Internal::proxy_settings(const OutboundHandlerConfig* msg) {
  return *msg->proxy_settings_;
}
void OutboundHandlerConfig::clear_sender_settings() {
  if (GetArena() == nullptr && sender_settings_ != nullptr) {
    delete sender_settings_;
  }
  sender_settings_ = nullptr;
}
void OutboundHandlerConfig::clear_proxy_settings() {
  if (GetArena() == nullptr && proxy_settings_ != nullptr) {
    delete proxy_settings_;
  }
  proxy_settings_ = nullptr;
}
OutboundHandlerConfig::OutboundHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.OutboundHandlerConfig)
}
OutboundHandlerConfig::OutboundHandlerConfig(const OutboundHandlerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  if (from._internal_has_sender_settings()) {
    sender_settings_ = new ::v2ray::core::common::serial::TypedMessage(*from.sender_settings_);
  } else {
    sender_settings_ = nullptr;
  }
  if (from._internal_has_proxy_settings()) {
    proxy_settings_ = new ::v2ray::core::common::serial::TypedMessage(*from.proxy_settings_);
  } else {
    proxy_settings_ = nullptr;
  }
  expire_ = from.expire_;
  // @@protoc_insertion_point(copy_constructor:v2ray.core.OutboundHandlerConfig)
}

void OutboundHandlerConfig::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expire_) -
    reinterpret_cast<char*>(&sender_settings_)) + sizeof(expire_));
}

OutboundHandlerConfig::~OutboundHandlerConfig() {
  // @@protoc_insertion_point(destructor:v2ray.core.OutboundHandlerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutboundHandlerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_settings_;
  if (this != internal_default_instance()) delete proxy_settings_;
}

void OutboundHandlerConfig::ArenaDtor(void* object) {
  OutboundHandlerConfig* _this = reinterpret_cast< OutboundHandlerConfig* >(object);
  (void)_this;
}
void OutboundHandlerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutboundHandlerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutboundHandlerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.OutboundHandlerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  comment_.ClearToEmpty();
  if (GetArena() == nullptr && sender_settings_ != nullptr) {
    delete sender_settings_;
  }
  sender_settings_ = nullptr;
  if (GetArena() == nullptr && proxy_settings_ != nullptr) {
    delete proxy_settings_;
  }
  proxy_settings_ = nullptr;
  expire_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutboundHandlerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v2ray.core.OutboundHandlerConfig.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v2ray.core.common.serial.TypedMessage sender_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxy_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v2ray.core.OutboundHandlerConfig.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutboundHandlerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.OutboundHandlerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v2ray.core.OutboundHandlerConfig.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // .v2ray.core.common.serial.TypedMessage sender_settings = 2;
  if (this->has_sender_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender_settings(this), target, stream);
  }

  // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
  if (this->has_proxy_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::proxy_settings(this), target, stream);
  }

  // int64 expire = 4;
  if (this->expire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expire(), target);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v2ray.core.OutboundHandlerConfig.comment");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.OutboundHandlerConfig)
  return target;
}

size_t OutboundHandlerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.OutboundHandlerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .v2ray.core.common.serial.TypedMessage sender_settings = 2;
  if (this->has_sender_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_settings_);
  }

  // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
  if (this->has_proxy_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proxy_settings_);
  }

  // int64 expire = 4;
  if (this->expire() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutboundHandlerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.OutboundHandlerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OutboundHandlerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutboundHandlerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.OutboundHandlerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.OutboundHandlerConfig)
    MergeFrom(*source);
  }
}

void OutboundHandlerConfig::MergeFrom(const OutboundHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.OutboundHandlerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.comment().size() > 0) {
    _internal_set_comment(from._internal_comment());
  }
  if (from.has_sender_settings()) {
    _internal_mutable_sender_settings()->::v2ray::core::common::serial::TypedMessage::MergeFrom(from._internal_sender_settings());
  }
  if (from.has_proxy_settings()) {
    _internal_mutable_proxy_settings()->::v2ray::core::common::serial::TypedMessage::MergeFrom(from._internal_proxy_settings());
  }
  if (from.expire() != 0) {
    _internal_set_expire(from._internal_expire());
  }
}

void OutboundHandlerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.OutboundHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutboundHandlerConfig::CopyFrom(const OutboundHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.OutboundHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundHandlerConfig::IsInitialized() const {
  return true;
}

void OutboundHandlerConfig::InternalSwap(OutboundHandlerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, expire_)
      + sizeof(OutboundHandlerConfig::expire_)
      - PROTOBUF_FIELD_OFFSET(OutboundHandlerConfig, sender_settings_)>(
          reinterpret_cast<char*>(&sender_settings_),
          reinterpret_cast<char*>(&other->sender_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutboundHandlerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace v2ray
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v2ray::core::Config* Arena::CreateMaybeMessage< ::v2ray::core::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::v2ray::core::InboundHandlerConfig* Arena::CreateMaybeMessage< ::v2ray::core::InboundHandlerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::InboundHandlerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::v2ray::core::OutboundHandlerConfig* Arena::CreateMaybeMessage< ::v2ray::core::OutboundHandlerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::OutboundHandlerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
