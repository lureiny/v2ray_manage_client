// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/serial/typed_message.pb.h"
#include "transport/config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_config_2eproto_metadata_getter(int index);
namespace v2ray {
namespace core {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class InboundHandlerConfig;
struct InboundHandlerConfigDefaultTypeInternal;
extern InboundHandlerConfigDefaultTypeInternal _InboundHandlerConfig_default_instance_;
class OutboundHandlerConfig;
struct OutboundHandlerConfigDefaultTypeInternal;
extern OutboundHandlerConfigDefaultTypeInternal _OutboundHandlerConfig_default_instance_;
}  // namespace core
}  // namespace v2ray
PROTOBUF_NAMESPACE_OPEN
template<> ::v2ray::core::Config* Arena::CreateMaybeMessage<::v2ray::core::Config>(Arena*);
template<> ::v2ray::core::InboundHandlerConfig* Arena::CreateMaybeMessage<::v2ray::core::InboundHandlerConfig>(Arena*);
template<> ::v2ray::core::OutboundHandlerConfig* Arena::CreateMaybeMessage<::v2ray::core::OutboundHandlerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v2ray {
namespace core {

// ===================================================================

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInboundFieldNumber = 1,
    kOutboundFieldNumber = 2,
    kAppFieldNumber = 4,
    kExtensionFieldNumber = 6,
    kTransportFieldNumber = 5,
  };
  // repeated .v2ray.core.InboundHandlerConfig inbound = 1;
  int inbound_size() const;
  private:
  int _internal_inbound_size() const;
  public:
  void clear_inbound();
  ::v2ray::core::InboundHandlerConfig* mutable_inbound(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::InboundHandlerConfig >*
      mutable_inbound();
  private:
  const ::v2ray::core::InboundHandlerConfig& _internal_inbound(int index) const;
  ::v2ray::core::InboundHandlerConfig* _internal_add_inbound();
  public:
  const ::v2ray::core::InboundHandlerConfig& inbound(int index) const;
  ::v2ray::core::InboundHandlerConfig* add_inbound();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::InboundHandlerConfig >&
      inbound() const;

  // repeated .v2ray.core.OutboundHandlerConfig outbound = 2;
  int outbound_size() const;
  private:
  int _internal_outbound_size() const;
  public:
  void clear_outbound();
  ::v2ray::core::OutboundHandlerConfig* mutable_outbound(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::OutboundHandlerConfig >*
      mutable_outbound();
  private:
  const ::v2ray::core::OutboundHandlerConfig& _internal_outbound(int index) const;
  ::v2ray::core::OutboundHandlerConfig* _internal_add_outbound();
  public:
  const ::v2ray::core::OutboundHandlerConfig& outbound(int index) const;
  ::v2ray::core::OutboundHandlerConfig* add_outbound();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::OutboundHandlerConfig >&
      outbound() const;

  // repeated .v2ray.core.common.serial.TypedMessage app = 4;
  int app_size() const;
  private:
  int _internal_app_size() const;
  public:
  void clear_app();
  ::v2ray::core::common::serial::TypedMessage* mutable_app(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >*
      mutable_app();
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_app(int index) const;
  ::v2ray::core::common::serial::TypedMessage* _internal_add_app();
  public:
  const ::v2ray::core::common::serial::TypedMessage& app(int index) const;
  ::v2ray::core::common::serial::TypedMessage* add_app();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >&
      app() const;

  // repeated .v2ray.core.common.serial.TypedMessage extension = 6;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::v2ray::core::common::serial::TypedMessage* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >*
      mutable_extension();
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_extension(int index) const;
  ::v2ray::core::common::serial::TypedMessage* _internal_add_extension();
  public:
  const ::v2ray::core::common::serial::TypedMessage& extension(int index) const;
  ::v2ray::core::common::serial::TypedMessage* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >&
      extension() const;

  // .v2ray.core.transport.Config transport = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  PROTOBUF_DEPRECATED void clear_transport();
  PROTOBUF_DEPRECATED const ::v2ray::core::transport::Config& transport() const;
  PROTOBUF_DEPRECATED ::v2ray::core::transport::Config* release_transport();
  PROTOBUF_DEPRECATED ::v2ray::core::transport::Config* mutable_transport();
  PROTOBUF_DEPRECATED void set_allocated_transport(::v2ray::core::transport::Config* transport);
  private:
  const ::v2ray::core::transport::Config& _internal_transport() const;
  ::v2ray::core::transport::Config* _internal_mutable_transport();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_transport(
      ::v2ray::core::transport::Config* transport);
  PROTOBUF_DEPRECATED ::v2ray::core::transport::Config* unsafe_arena_release_transport();

  // @@protoc_insertion_point(class_scope:v2ray.core.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::InboundHandlerConfig > inbound_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::OutboundHandlerConfig > outbound_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage > app_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage > extension_;
  ::v2ray::core::transport::Config* transport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class InboundHandlerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.InboundHandlerConfig) */ {
 public:
  inline InboundHandlerConfig() : InboundHandlerConfig(nullptr) {}
  virtual ~InboundHandlerConfig();
  explicit constexpr InboundHandlerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InboundHandlerConfig(const InboundHandlerConfig& from);
  InboundHandlerConfig(InboundHandlerConfig&& from) noexcept
    : InboundHandlerConfig() {
    *this = ::std::move(from);
  }

  inline InboundHandlerConfig& operator=(const InboundHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InboundHandlerConfig& operator=(InboundHandlerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InboundHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const InboundHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const InboundHandlerConfig*>(
               &_InboundHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InboundHandlerConfig& a, InboundHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InboundHandlerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InboundHandlerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InboundHandlerConfig* New() const final {
    return CreateMaybeMessage<InboundHandlerConfig>(nullptr);
  }

  InboundHandlerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InboundHandlerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InboundHandlerConfig& from);
  void MergeFrom(const InboundHandlerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InboundHandlerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.InboundHandlerConfig";
  }
  protected:
  explicit InboundHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kReceiverSettingsFieldNumber = 2,
    kProxySettingsFieldNumber = 3,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .v2ray.core.common.serial.TypedMessage receiver_settings = 2;
  bool has_receiver_settings() const;
  private:
  bool _internal_has_receiver_settings() const;
  public:
  void clear_receiver_settings();
  const ::v2ray::core::common::serial::TypedMessage& receiver_settings() const;
  ::v2ray::core::common::serial::TypedMessage* release_receiver_settings();
  ::v2ray::core::common::serial::TypedMessage* mutable_receiver_settings();
  void set_allocated_receiver_settings(::v2ray::core::common::serial::TypedMessage* receiver_settings);
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_receiver_settings() const;
  ::v2ray::core::common::serial::TypedMessage* _internal_mutable_receiver_settings();
  public:
  void unsafe_arena_set_allocated_receiver_settings(
      ::v2ray::core::common::serial::TypedMessage* receiver_settings);
  ::v2ray::core::common::serial::TypedMessage* unsafe_arena_release_receiver_settings();

  // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
  bool has_proxy_settings() const;
  private:
  bool _internal_has_proxy_settings() const;
  public:
  void clear_proxy_settings();
  const ::v2ray::core::common::serial::TypedMessage& proxy_settings() const;
  ::v2ray::core::common::serial::TypedMessage* release_proxy_settings();
  ::v2ray::core::common::serial::TypedMessage* mutable_proxy_settings();
  void set_allocated_proxy_settings(::v2ray::core::common::serial::TypedMessage* proxy_settings);
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_proxy_settings() const;
  ::v2ray::core::common::serial::TypedMessage* _internal_mutable_proxy_settings();
  public:
  void unsafe_arena_set_allocated_proxy_settings(
      ::v2ray::core::common::serial::TypedMessage* proxy_settings);
  ::v2ray::core::common::serial::TypedMessage* unsafe_arena_release_proxy_settings();

  // @@protoc_insertion_point(class_scope:v2ray.core.InboundHandlerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::v2ray::core::common::serial::TypedMessage* receiver_settings_;
  ::v2ray::core::common::serial::TypedMessage* proxy_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class OutboundHandlerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.OutboundHandlerConfig) */ {
 public:
  inline OutboundHandlerConfig() : OutboundHandlerConfig(nullptr) {}
  virtual ~OutboundHandlerConfig();
  explicit constexpr OutboundHandlerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutboundHandlerConfig(const OutboundHandlerConfig& from);
  OutboundHandlerConfig(OutboundHandlerConfig&& from) noexcept
    : OutboundHandlerConfig() {
    *this = ::std::move(from);
  }

  inline OutboundHandlerConfig& operator=(const OutboundHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutboundHandlerConfig& operator=(OutboundHandlerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutboundHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutboundHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const OutboundHandlerConfig*>(
               &_OutboundHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OutboundHandlerConfig& a, OutboundHandlerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OutboundHandlerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutboundHandlerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutboundHandlerConfig* New() const final {
    return CreateMaybeMessage<OutboundHandlerConfig>(nullptr);
  }

  OutboundHandlerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutboundHandlerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutboundHandlerConfig& from);
  void MergeFrom(const OutboundHandlerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutboundHandlerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.OutboundHandlerConfig";
  }
  protected:
  explicit OutboundHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_config_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kCommentFieldNumber = 5,
    kSenderSettingsFieldNumber = 2,
    kProxySettingsFieldNumber = 3,
    kExpireFieldNumber = 4,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string comment = 5;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .v2ray.core.common.serial.TypedMessage sender_settings = 2;
  bool has_sender_settings() const;
  private:
  bool _internal_has_sender_settings() const;
  public:
  void clear_sender_settings();
  const ::v2ray::core::common::serial::TypedMessage& sender_settings() const;
  ::v2ray::core::common::serial::TypedMessage* release_sender_settings();
  ::v2ray::core::common::serial::TypedMessage* mutable_sender_settings();
  void set_allocated_sender_settings(::v2ray::core::common::serial::TypedMessage* sender_settings);
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_sender_settings() const;
  ::v2ray::core::common::serial::TypedMessage* _internal_mutable_sender_settings();
  public:
  void unsafe_arena_set_allocated_sender_settings(
      ::v2ray::core::common::serial::TypedMessage* sender_settings);
  ::v2ray::core::common::serial::TypedMessage* unsafe_arena_release_sender_settings();

  // .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
  bool has_proxy_settings() const;
  private:
  bool _internal_has_proxy_settings() const;
  public:
  void clear_proxy_settings();
  const ::v2ray::core::common::serial::TypedMessage& proxy_settings() const;
  ::v2ray::core::common::serial::TypedMessage* release_proxy_settings();
  ::v2ray::core::common::serial::TypedMessage* mutable_proxy_settings();
  void set_allocated_proxy_settings(::v2ray::core::common::serial::TypedMessage* proxy_settings);
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_proxy_settings() const;
  ::v2ray::core::common::serial::TypedMessage* _internal_mutable_proxy_settings();
  public:
  void unsafe_arena_set_allocated_proxy_settings(
      ::v2ray::core::common::serial::TypedMessage* proxy_settings);
  ::v2ray::core::common::serial::TypedMessage* unsafe_arena_release_proxy_settings();

  // int64 expire = 4;
  void clear_expire();
  ::PROTOBUF_NAMESPACE_ID::int64 expire() const;
  void set_expire(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expire() const;
  void _internal_set_expire(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.OutboundHandlerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::v2ray::core::common::serial::TypedMessage* sender_settings_;
  ::v2ray::core::common::serial::TypedMessage* proxy_settings_;
  ::PROTOBUF_NAMESPACE_ID::int64 expire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// repeated .v2ray.core.InboundHandlerConfig inbound = 1;
inline int Config::_internal_inbound_size() const {
  return inbound_.size();
}
inline int Config::inbound_size() const {
  return _internal_inbound_size();
}
inline void Config::clear_inbound() {
  inbound_.Clear();
}
inline ::v2ray::core::InboundHandlerConfig* Config::mutable_inbound(int index) {
  // @@protoc_insertion_point(field_mutable:v2ray.core.Config.inbound)
  return inbound_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::InboundHandlerConfig >*
Config::mutable_inbound() {
  // @@protoc_insertion_point(field_mutable_list:v2ray.core.Config.inbound)
  return &inbound_;
}
inline const ::v2ray::core::InboundHandlerConfig& Config::_internal_inbound(int index) const {
  return inbound_.Get(index);
}
inline const ::v2ray::core::InboundHandlerConfig& Config::inbound(int index) const {
  // @@protoc_insertion_point(field_get:v2ray.core.Config.inbound)
  return _internal_inbound(index);
}
inline ::v2ray::core::InboundHandlerConfig* Config::_internal_add_inbound() {
  return inbound_.Add();
}
inline ::v2ray::core::InboundHandlerConfig* Config::add_inbound() {
  // @@protoc_insertion_point(field_add:v2ray.core.Config.inbound)
  return _internal_add_inbound();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::InboundHandlerConfig >&
Config::inbound() const {
  // @@protoc_insertion_point(field_list:v2ray.core.Config.inbound)
  return inbound_;
}

// repeated .v2ray.core.OutboundHandlerConfig outbound = 2;
inline int Config::_internal_outbound_size() const {
  return outbound_.size();
}
inline int Config::outbound_size() const {
  return _internal_outbound_size();
}
inline void Config::clear_outbound() {
  outbound_.Clear();
}
inline ::v2ray::core::OutboundHandlerConfig* Config::mutable_outbound(int index) {
  // @@protoc_insertion_point(field_mutable:v2ray.core.Config.outbound)
  return outbound_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::OutboundHandlerConfig >*
Config::mutable_outbound() {
  // @@protoc_insertion_point(field_mutable_list:v2ray.core.Config.outbound)
  return &outbound_;
}
inline const ::v2ray::core::OutboundHandlerConfig& Config::_internal_outbound(int index) const {
  return outbound_.Get(index);
}
inline const ::v2ray::core::OutboundHandlerConfig& Config::outbound(int index) const {
  // @@protoc_insertion_point(field_get:v2ray.core.Config.outbound)
  return _internal_outbound(index);
}
inline ::v2ray::core::OutboundHandlerConfig* Config::_internal_add_outbound() {
  return outbound_.Add();
}
inline ::v2ray::core::OutboundHandlerConfig* Config::add_outbound() {
  // @@protoc_insertion_point(field_add:v2ray.core.Config.outbound)
  return _internal_add_outbound();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::OutboundHandlerConfig >&
Config::outbound() const {
  // @@protoc_insertion_point(field_list:v2ray.core.Config.outbound)
  return outbound_;
}

// repeated .v2ray.core.common.serial.TypedMessage app = 4;
inline int Config::_internal_app_size() const {
  return app_.size();
}
inline int Config::app_size() const {
  return _internal_app_size();
}
inline ::v2ray::core::common::serial::TypedMessage* Config::mutable_app(int index) {
  // @@protoc_insertion_point(field_mutable:v2ray.core.Config.app)
  return app_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >*
Config::mutable_app() {
  // @@protoc_insertion_point(field_mutable_list:v2ray.core.Config.app)
  return &app_;
}
inline const ::v2ray::core::common::serial::TypedMessage& Config::_internal_app(int index) const {
  return app_.Get(index);
}
inline const ::v2ray::core::common::serial::TypedMessage& Config::app(int index) const {
  // @@protoc_insertion_point(field_get:v2ray.core.Config.app)
  return _internal_app(index);
}
inline ::v2ray::core::common::serial::TypedMessage* Config::_internal_add_app() {
  return app_.Add();
}
inline ::v2ray::core::common::serial::TypedMessage* Config::add_app() {
  // @@protoc_insertion_point(field_add:v2ray.core.Config.app)
  return _internal_add_app();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >&
Config::app() const {
  // @@protoc_insertion_point(field_list:v2ray.core.Config.app)
  return app_;
}

// .v2ray.core.transport.Config transport = 5 [deprecated = true];
inline bool Config::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool Config::has_transport() const {
  return _internal_has_transport();
}
inline const ::v2ray::core::transport::Config& Config::_internal_transport() const {
  const ::v2ray::core::transport::Config* p = transport_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::transport::Config&>(
      ::v2ray::core::transport::_Config_default_instance_);
}
inline const ::v2ray::core::transport::Config& Config::transport() const {
  // @@protoc_insertion_point(field_get:v2ray.core.Config.transport)
  return _internal_transport();
}
inline void Config::unsafe_arena_set_allocated_transport(
    ::v2ray::core::transport::Config* transport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.Config.transport)
}
inline ::v2ray::core::transport::Config* Config::release_transport() {
  
  ::v2ray::core::transport::Config* temp = transport_;
  transport_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::transport::Config* Config::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_release:v2ray.core.Config.transport)
  
  ::v2ray::core::transport::Config* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::v2ray::core::transport::Config* Config::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::transport::Config>(GetArena());
    transport_ = p;
  }
  return transport_;
}
inline ::v2ray::core::transport::Config* Config::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.Config.transport)
  return _internal_mutable_transport();
}
inline void Config::set_allocated_transport(::v2ray::core::transport::Config* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport)->GetArena();
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.Config.transport)
}

// repeated .v2ray.core.common.serial.TypedMessage extension = 6;
inline int Config::_internal_extension_size() const {
  return extension_.size();
}
inline int Config::extension_size() const {
  return _internal_extension_size();
}
inline ::v2ray::core::common::serial::TypedMessage* Config::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:v2ray.core.Config.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >*
Config::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:v2ray.core.Config.extension)
  return &extension_;
}
inline const ::v2ray::core::common::serial::TypedMessage& Config::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::v2ray::core::common::serial::TypedMessage& Config::extension(int index) const {
  // @@protoc_insertion_point(field_get:v2ray.core.Config.extension)
  return _internal_extension(index);
}
inline ::v2ray::core::common::serial::TypedMessage* Config::_internal_add_extension() {
  return extension_.Add();
}
inline ::v2ray::core::common::serial::TypedMessage* Config::add_extension() {
  // @@protoc_insertion_point(field_add:v2ray.core.Config.extension)
  return _internal_add_extension();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >&
Config::extension() const {
  // @@protoc_insertion_point(field_list:v2ray.core.Config.extension)
  return extension_;
}

// -------------------------------------------------------------------

// InboundHandlerConfig

// string tag = 1;
inline void InboundHandlerConfig::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& InboundHandlerConfig::tag() const {
  // @@protoc_insertion_point(field_get:v2ray.core.InboundHandlerConfig.tag)
  return _internal_tag();
}
inline void InboundHandlerConfig::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:v2ray.core.InboundHandlerConfig.tag)
}
inline std::string* InboundHandlerConfig::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.InboundHandlerConfig.tag)
  return _internal_mutable_tag();
}
inline const std::string& InboundHandlerConfig::_internal_tag() const {
  return tag_.Get();
}
inline void InboundHandlerConfig::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InboundHandlerConfig::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.InboundHandlerConfig.tag)
}
inline void InboundHandlerConfig::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.InboundHandlerConfig.tag)
}
inline void InboundHandlerConfig::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.InboundHandlerConfig.tag)
}
inline std::string* InboundHandlerConfig::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InboundHandlerConfig::release_tag() {
  // @@protoc_insertion_point(field_release:v2ray.core.InboundHandlerConfig.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InboundHandlerConfig::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.InboundHandlerConfig.tag)
}

// .v2ray.core.common.serial.TypedMessage receiver_settings = 2;
inline bool InboundHandlerConfig::_internal_has_receiver_settings() const {
  return this != internal_default_instance() && receiver_settings_ != nullptr;
}
inline bool InboundHandlerConfig::has_receiver_settings() const {
  return _internal_has_receiver_settings();
}
inline const ::v2ray::core::common::serial::TypedMessage& InboundHandlerConfig::_internal_receiver_settings() const {
  const ::v2ray::core::common::serial::TypedMessage* p = receiver_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::serial::TypedMessage&>(
      ::v2ray::core::common::serial::_TypedMessage_default_instance_);
}
inline const ::v2ray::core::common::serial::TypedMessage& InboundHandlerConfig::receiver_settings() const {
  // @@protoc_insertion_point(field_get:v2ray.core.InboundHandlerConfig.receiver_settings)
  return _internal_receiver_settings();
}
inline void InboundHandlerConfig::unsafe_arena_set_allocated_receiver_settings(
    ::v2ray::core::common::serial::TypedMessage* receiver_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_settings_);
  }
  receiver_settings_ = receiver_settings;
  if (receiver_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.InboundHandlerConfig.receiver_settings)
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::release_receiver_settings() {
  
  ::v2ray::core::common::serial::TypedMessage* temp = receiver_settings_;
  receiver_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::unsafe_arena_release_receiver_settings() {
  // @@protoc_insertion_point(field_release:v2ray.core.InboundHandlerConfig.receiver_settings)
  
  ::v2ray::core::common::serial::TypedMessage* temp = receiver_settings_;
  receiver_settings_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::_internal_mutable_receiver_settings() {
  
  if (receiver_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::serial::TypedMessage>(GetArena());
    receiver_settings_ = p;
  }
  return receiver_settings_;
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::mutable_receiver_settings() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.InboundHandlerConfig.receiver_settings)
  return _internal_mutable_receiver_settings();
}
inline void InboundHandlerConfig::set_allocated_receiver_settings(::v2ray::core::common::serial::TypedMessage* receiver_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_settings_);
  }
  if (receiver_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_settings)->GetArena();
    if (message_arena != submessage_arena) {
      receiver_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_settings, submessage_arena);
    }
    
  } else {
    
  }
  receiver_settings_ = receiver_settings;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.InboundHandlerConfig.receiver_settings)
}

// .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
inline bool InboundHandlerConfig::_internal_has_proxy_settings() const {
  return this != internal_default_instance() && proxy_settings_ != nullptr;
}
inline bool InboundHandlerConfig::has_proxy_settings() const {
  return _internal_has_proxy_settings();
}
inline const ::v2ray::core::common::serial::TypedMessage& InboundHandlerConfig::_internal_proxy_settings() const {
  const ::v2ray::core::common::serial::TypedMessage* p = proxy_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::serial::TypedMessage&>(
      ::v2ray::core::common::serial::_TypedMessage_default_instance_);
}
inline const ::v2ray::core::common::serial::TypedMessage& InboundHandlerConfig::proxy_settings() const {
  // @@protoc_insertion_point(field_get:v2ray.core.InboundHandlerConfig.proxy_settings)
  return _internal_proxy_settings();
}
inline void InboundHandlerConfig::unsafe_arena_set_allocated_proxy_settings(
    ::v2ray::core::common::serial::TypedMessage* proxy_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_settings_);
  }
  proxy_settings_ = proxy_settings;
  if (proxy_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.InboundHandlerConfig.proxy_settings)
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::release_proxy_settings() {
  
  ::v2ray::core::common::serial::TypedMessage* temp = proxy_settings_;
  proxy_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::unsafe_arena_release_proxy_settings() {
  // @@protoc_insertion_point(field_release:v2ray.core.InboundHandlerConfig.proxy_settings)
  
  ::v2ray::core::common::serial::TypedMessage* temp = proxy_settings_;
  proxy_settings_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::_internal_mutable_proxy_settings() {
  
  if (proxy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::serial::TypedMessage>(GetArena());
    proxy_settings_ = p;
  }
  return proxy_settings_;
}
inline ::v2ray::core::common::serial::TypedMessage* InboundHandlerConfig::mutable_proxy_settings() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.InboundHandlerConfig.proxy_settings)
  return _internal_mutable_proxy_settings();
}
inline void InboundHandlerConfig::set_allocated_proxy_settings(::v2ray::core::common::serial::TypedMessage* proxy_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_settings_);
  }
  if (proxy_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_settings)->GetArena();
    if (message_arena != submessage_arena) {
      proxy_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxy_settings, submessage_arena);
    }
    
  } else {
    
  }
  proxy_settings_ = proxy_settings;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.InboundHandlerConfig.proxy_settings)
}

// -------------------------------------------------------------------

// OutboundHandlerConfig

// string tag = 1;
inline void OutboundHandlerConfig::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& OutboundHandlerConfig::tag() const {
  // @@protoc_insertion_point(field_get:v2ray.core.OutboundHandlerConfig.tag)
  return _internal_tag();
}
inline void OutboundHandlerConfig::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:v2ray.core.OutboundHandlerConfig.tag)
}
inline std::string* OutboundHandlerConfig::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.OutboundHandlerConfig.tag)
  return _internal_mutable_tag();
}
inline const std::string& OutboundHandlerConfig::_internal_tag() const {
  return tag_.Get();
}
inline void OutboundHandlerConfig::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutboundHandlerConfig::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.OutboundHandlerConfig.tag)
}
inline void OutboundHandlerConfig::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.OutboundHandlerConfig.tag)
}
inline void OutboundHandlerConfig::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.OutboundHandlerConfig.tag)
}
inline std::string* OutboundHandlerConfig::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutboundHandlerConfig::release_tag() {
  // @@protoc_insertion_point(field_release:v2ray.core.OutboundHandlerConfig.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutboundHandlerConfig::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.OutboundHandlerConfig.tag)
}

// .v2ray.core.common.serial.TypedMessage sender_settings = 2;
inline bool OutboundHandlerConfig::_internal_has_sender_settings() const {
  return this != internal_default_instance() && sender_settings_ != nullptr;
}
inline bool OutboundHandlerConfig::has_sender_settings() const {
  return _internal_has_sender_settings();
}
inline const ::v2ray::core::common::serial::TypedMessage& OutboundHandlerConfig::_internal_sender_settings() const {
  const ::v2ray::core::common::serial::TypedMessage* p = sender_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::serial::TypedMessage&>(
      ::v2ray::core::common::serial::_TypedMessage_default_instance_);
}
inline const ::v2ray::core::common::serial::TypedMessage& OutboundHandlerConfig::sender_settings() const {
  // @@protoc_insertion_point(field_get:v2ray.core.OutboundHandlerConfig.sender_settings)
  return _internal_sender_settings();
}
inline void OutboundHandlerConfig::unsafe_arena_set_allocated_sender_settings(
    ::v2ray::core::common::serial::TypedMessage* sender_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_settings_);
  }
  sender_settings_ = sender_settings;
  if (sender_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.OutboundHandlerConfig.sender_settings)
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::release_sender_settings() {
  
  ::v2ray::core::common::serial::TypedMessage* temp = sender_settings_;
  sender_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::unsafe_arena_release_sender_settings() {
  // @@protoc_insertion_point(field_release:v2ray.core.OutboundHandlerConfig.sender_settings)
  
  ::v2ray::core::common::serial::TypedMessage* temp = sender_settings_;
  sender_settings_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::_internal_mutable_sender_settings() {
  
  if (sender_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::serial::TypedMessage>(GetArena());
    sender_settings_ = p;
  }
  return sender_settings_;
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::mutable_sender_settings() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.OutboundHandlerConfig.sender_settings)
  return _internal_mutable_sender_settings();
}
inline void OutboundHandlerConfig::set_allocated_sender_settings(::v2ray::core::common::serial::TypedMessage* sender_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_settings_);
  }
  if (sender_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_settings)->GetArena();
    if (message_arena != submessage_arena) {
      sender_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_settings, submessage_arena);
    }
    
  } else {
    
  }
  sender_settings_ = sender_settings;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.OutboundHandlerConfig.sender_settings)
}

// .v2ray.core.common.serial.TypedMessage proxy_settings = 3;
inline bool OutboundHandlerConfig::_internal_has_proxy_settings() const {
  return this != internal_default_instance() && proxy_settings_ != nullptr;
}
inline bool OutboundHandlerConfig::has_proxy_settings() const {
  return _internal_has_proxy_settings();
}
inline const ::v2ray::core::common::serial::TypedMessage& OutboundHandlerConfig::_internal_proxy_settings() const {
  const ::v2ray::core::common::serial::TypedMessage* p = proxy_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::serial::TypedMessage&>(
      ::v2ray::core::common::serial::_TypedMessage_default_instance_);
}
inline const ::v2ray::core::common::serial::TypedMessage& OutboundHandlerConfig::proxy_settings() const {
  // @@protoc_insertion_point(field_get:v2ray.core.OutboundHandlerConfig.proxy_settings)
  return _internal_proxy_settings();
}
inline void OutboundHandlerConfig::unsafe_arena_set_allocated_proxy_settings(
    ::v2ray::core::common::serial::TypedMessage* proxy_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_settings_);
  }
  proxy_settings_ = proxy_settings;
  if (proxy_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.OutboundHandlerConfig.proxy_settings)
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::release_proxy_settings() {
  
  ::v2ray::core::common::serial::TypedMessage* temp = proxy_settings_;
  proxy_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::unsafe_arena_release_proxy_settings() {
  // @@protoc_insertion_point(field_release:v2ray.core.OutboundHandlerConfig.proxy_settings)
  
  ::v2ray::core::common::serial::TypedMessage* temp = proxy_settings_;
  proxy_settings_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::_internal_mutable_proxy_settings() {
  
  if (proxy_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::serial::TypedMessage>(GetArena());
    proxy_settings_ = p;
  }
  return proxy_settings_;
}
inline ::v2ray::core::common::serial::TypedMessage* OutboundHandlerConfig::mutable_proxy_settings() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.OutboundHandlerConfig.proxy_settings)
  return _internal_mutable_proxy_settings();
}
inline void OutboundHandlerConfig::set_allocated_proxy_settings(::v2ray::core::common::serial::TypedMessage* proxy_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_settings_);
  }
  if (proxy_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_settings)->GetArena();
    if (message_arena != submessage_arena) {
      proxy_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxy_settings, submessage_arena);
    }
    
  } else {
    
  }
  proxy_settings_ = proxy_settings;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.OutboundHandlerConfig.proxy_settings)
}

// int64 expire = 4;
inline void OutboundHandlerConfig::clear_expire() {
  expire_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OutboundHandlerConfig::_internal_expire() const {
  return expire_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OutboundHandlerConfig::expire() const {
  // @@protoc_insertion_point(field_get:v2ray.core.OutboundHandlerConfig.expire)
  return _internal_expire();
}
inline void OutboundHandlerConfig::_internal_set_expire(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expire_ = value;
}
inline void OutboundHandlerConfig::set_expire(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expire(value);
  // @@protoc_insertion_point(field_set:v2ray.core.OutboundHandlerConfig.expire)
}

// string comment = 5;
inline void OutboundHandlerConfig::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& OutboundHandlerConfig::comment() const {
  // @@protoc_insertion_point(field_get:v2ray.core.OutboundHandlerConfig.comment)
  return _internal_comment();
}
inline void OutboundHandlerConfig::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:v2ray.core.OutboundHandlerConfig.comment)
}
inline std::string* OutboundHandlerConfig::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.OutboundHandlerConfig.comment)
  return _internal_mutable_comment();
}
inline const std::string& OutboundHandlerConfig::_internal_comment() const {
  return comment_.Get();
}
inline void OutboundHandlerConfig::_internal_set_comment(const std::string& value) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutboundHandlerConfig::set_comment(std::string&& value) {
  
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.OutboundHandlerConfig.comment)
}
inline void OutboundHandlerConfig::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.OutboundHandlerConfig.comment)
}
inline void OutboundHandlerConfig::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.OutboundHandlerConfig.comment)
}
inline std::string* OutboundHandlerConfig::_internal_mutable_comment() {
  
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutboundHandlerConfig::release_comment() {
  // @@protoc_insertion_point(field_release:v2ray.core.OutboundHandlerConfig.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutboundHandlerConfig::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.OutboundHandlerConfig.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace v2ray

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
