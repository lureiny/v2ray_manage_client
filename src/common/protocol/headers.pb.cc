// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/protocol/headers.proto

#include "common/protocol/headers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v2ray {
namespace core {
namespace common {
namespace protocol {
constexpr SecurityConfig::SecurityConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct SecurityConfigDefaultTypeInternal {
  constexpr SecurityConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecurityConfigDefaultTypeInternal() {}
  union {
    SecurityConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecurityConfigDefaultTypeInternal _SecurityConfig_default_instance_;
}  // namespace protocol
}  // namespace common
}  // namespace core
}  // namespace v2ray
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fprotocol_2fheaders_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fprotocol_2fheaders_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fprotocol_2fheaders_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fprotocol_2fheaders_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::common::protocol::SecurityConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::common::protocol::SecurityConfig, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v2ray::core::common::protocol::SecurityConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::common::protocol::_SecurityConfig_default_instance_),
};

const char descriptor_table_protodef_common_2fprotocol_2fheaders_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035common/protocol/headers.proto\022\032v2ray.c"
  "ore.common.protocol\"H\n\016SecurityConfig\0226\n"
  "\004type\030\001 \001(\0162(.v2ray.core.common.protocol"
  ".SecurityType*l\n\014SecurityType\022\013\n\007UNKNOWN"
  "\020\000\022\n\n\006LEGACY\020\001\022\010\n\004AUTO\020\002\022\016\n\nAES128_GCM\020\003"
  "\022\025\n\021CHACHA20_POLY1305\020\004\022\010\n\004NONE\020\005\022\010\n\004ZER"
  "O\020\006Bo\n\036com.v2ray.core.common.protocolP\001Z"
  ".github.com/v2fly/v2ray-core/v4/common/p"
  "rotocol\252\002\032V2Ray.Core.Common.Protocolb\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fprotocol_2fheaders_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fprotocol_2fheaders_2eproto = {
  false, false, 364, descriptor_table_protodef_common_2fprotocol_2fheaders_2eproto, "common/protocol/headers.proto", 
  &descriptor_table_common_2fprotocol_2fheaders_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_common_2fprotocol_2fheaders_2eproto::offsets,
  file_level_metadata_common_2fprotocol_2fheaders_2eproto, file_level_enum_descriptors_common_2fprotocol_2fheaders_2eproto, file_level_service_descriptors_common_2fprotocol_2fheaders_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_common_2fprotocol_2fheaders_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fprotocol_2fheaders_2eproto);
  return descriptor_table_common_2fprotocol_2fheaders_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2fprotocol_2fheaders_2eproto(&descriptor_table_common_2fprotocol_2fheaders_2eproto);
namespace v2ray {
namespace core {
namespace common {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fprotocol_2fheaders_2eproto);
  return file_level_enum_descriptors_common_2fprotocol_2fheaders_2eproto[0];
}
bool SecurityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SecurityConfig::_Internal {
 public:
};

SecurityConfig::SecurityConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.common.protocol.SecurityConfig)
}
SecurityConfig::SecurityConfig(const SecurityConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:v2ray.core.common.protocol.SecurityConfig)
}

void SecurityConfig::SharedCtor() {
type_ = 0;
}

SecurityConfig::~SecurityConfig() {
  // @@protoc_insertion_point(destructor:v2ray.core.common.protocol.SecurityConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SecurityConfig::ArenaDtor(void* object) {
  SecurityConfig* _this = reinterpret_cast< SecurityConfig* >(object);
  (void)_this;
}
void SecurityConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.common.protocol.SecurityConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .v2ray.core.common.protocol.SecurityType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::v2ray::core::common::protocol::SecurityType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.common.protocol.SecurityConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v2ray.core.common.protocol.SecurityType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.common.protocol.SecurityConfig)
  return target;
}

size_t SecurityConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.common.protocol.SecurityConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v2ray.core.common.protocol.SecurityType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.common.protocol.SecurityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.common.protocol.SecurityConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.common.protocol.SecurityConfig)
    MergeFrom(*source);
  }
}

void SecurityConfig::MergeFrom(const SecurityConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.common.protocol.SecurityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SecurityConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.common.protocol.SecurityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityConfig::CopyFrom(const SecurityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.common.protocol.SecurityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityConfig::IsInitialized() const {
  return true;
}

void SecurityConfig::InternalSwap(SecurityConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace common
}  // namespace core
}  // namespace v2ray
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v2ray::core::common::protocol::SecurityConfig* Arena::CreateMaybeMessage< ::v2ray::core::common::protocol::SecurityConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::common::protocol::SecurityConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
