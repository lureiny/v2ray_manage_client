// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/serial/typed_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_2finternet_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2finternet_2fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_2finternet_2fconfig_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_transport_2finternet_2fconfig_2eproto_metadata_getter(int index);
namespace v2ray {
namespace core {
namespace transport {
namespace internet {
class ProxyConfig;
struct ProxyConfigDefaultTypeInternal;
extern ProxyConfigDefaultTypeInternal _ProxyConfig_default_instance_;
class SocketConfig;
struct SocketConfigDefaultTypeInternal;
extern SocketConfigDefaultTypeInternal _SocketConfig_default_instance_;
class StreamConfig;
struct StreamConfigDefaultTypeInternal;
extern StreamConfigDefaultTypeInternal _StreamConfig_default_instance_;
class TransportConfig;
struct TransportConfigDefaultTypeInternal;
extern TransportConfigDefaultTypeInternal _TransportConfig_default_instance_;
}  // namespace internet
}  // namespace transport
}  // namespace core
}  // namespace v2ray
PROTOBUF_NAMESPACE_OPEN
template<> ::v2ray::core::transport::internet::ProxyConfig* Arena::CreateMaybeMessage<::v2ray::core::transport::internet::ProxyConfig>(Arena*);
template<> ::v2ray::core::transport::internet::SocketConfig* Arena::CreateMaybeMessage<::v2ray::core::transport::internet::SocketConfig>(Arena*);
template<> ::v2ray::core::transport::internet::StreamConfig* Arena::CreateMaybeMessage<::v2ray::core::transport::internet::StreamConfig>(Arena*);
template<> ::v2ray::core::transport::internet::TransportConfig* Arena::CreateMaybeMessage<::v2ray::core::transport::internet::TransportConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v2ray {
namespace core {
namespace transport {
namespace internet {

enum SocketConfig_TCPFastOpenState : int {
  SocketConfig_TCPFastOpenState_AsIs = 0,
  SocketConfig_TCPFastOpenState_Enable = 1,
  SocketConfig_TCPFastOpenState_Disable = 2,
  SocketConfig_TCPFastOpenState_SocketConfig_TCPFastOpenState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SocketConfig_TCPFastOpenState_SocketConfig_TCPFastOpenState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SocketConfig_TCPFastOpenState_IsValid(int value);
constexpr SocketConfig_TCPFastOpenState SocketConfig_TCPFastOpenState_TCPFastOpenState_MIN = SocketConfig_TCPFastOpenState_AsIs;
constexpr SocketConfig_TCPFastOpenState SocketConfig_TCPFastOpenState_TCPFastOpenState_MAX = SocketConfig_TCPFastOpenState_Disable;
constexpr int SocketConfig_TCPFastOpenState_TCPFastOpenState_ARRAYSIZE = SocketConfig_TCPFastOpenState_TCPFastOpenState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SocketConfig_TCPFastOpenState_descriptor();
template<typename T>
inline const std::string& SocketConfig_TCPFastOpenState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SocketConfig_TCPFastOpenState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SocketConfig_TCPFastOpenState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SocketConfig_TCPFastOpenState_descriptor(), enum_t_value);
}
inline bool SocketConfig_TCPFastOpenState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketConfig_TCPFastOpenState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SocketConfig_TCPFastOpenState>(
    SocketConfig_TCPFastOpenState_descriptor(), name, value);
}
enum SocketConfig_TProxyMode : int {
  SocketConfig_TProxyMode_Off = 0,
  SocketConfig_TProxyMode_TProxy = 1,
  SocketConfig_TProxyMode_Redirect = 2,
  SocketConfig_TProxyMode_SocketConfig_TProxyMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SocketConfig_TProxyMode_SocketConfig_TProxyMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SocketConfig_TProxyMode_IsValid(int value);
constexpr SocketConfig_TProxyMode SocketConfig_TProxyMode_TProxyMode_MIN = SocketConfig_TProxyMode_Off;
constexpr SocketConfig_TProxyMode SocketConfig_TProxyMode_TProxyMode_MAX = SocketConfig_TProxyMode_Redirect;
constexpr int SocketConfig_TProxyMode_TProxyMode_ARRAYSIZE = SocketConfig_TProxyMode_TProxyMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SocketConfig_TProxyMode_descriptor();
template<typename T>
inline const std::string& SocketConfig_TProxyMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SocketConfig_TProxyMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SocketConfig_TProxyMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SocketConfig_TProxyMode_descriptor(), enum_t_value);
}
inline bool SocketConfig_TProxyMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketConfig_TProxyMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SocketConfig_TProxyMode>(
    SocketConfig_TProxyMode_descriptor(), name, value);
}
enum TransportProtocol : int {
  TCP = 0,
  UDP = 1,
  MKCP = 2,
  WebSocket = 3,
  HTTP = 4,
  DomainSocket = 5,
  TransportProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransportProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransportProtocol_IsValid(int value);
constexpr TransportProtocol TransportProtocol_MIN = TCP;
constexpr TransportProtocol TransportProtocol_MAX = DomainSocket;
constexpr int TransportProtocol_ARRAYSIZE = TransportProtocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransportProtocol_descriptor();
template<typename T>
inline const std::string& TransportProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransportProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransportProtocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransportProtocol_descriptor(), enum_t_value);
}
inline bool TransportProtocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransportProtocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransportProtocol>(
    TransportProtocol_descriptor(), name, value);
}
// ===================================================================

class TransportConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.transport.internet.TransportConfig) */ {
 public:
  inline TransportConfig() : TransportConfig(nullptr) {}
  virtual ~TransportConfig();
  explicit constexpr TransportConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportConfig(const TransportConfig& from);
  TransportConfig(TransportConfig&& from) noexcept
    : TransportConfig() {
    *this = ::std::move(from);
  }

  inline TransportConfig& operator=(const TransportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportConfig& operator=(TransportConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportConfig* internal_default_instance() {
    return reinterpret_cast<const TransportConfig*>(
               &_TransportConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransportConfig& a, TransportConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportConfig* New() const final {
    return CreateMaybeMessage<TransportConfig>(nullptr);
  }

  TransportConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportConfig& from);
  void MergeFrom(const TransportConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.transport.internet.TransportConfig";
  }
  protected:
  explicit TransportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_2finternet_2fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolNameFieldNumber = 3,
    kSettingsFieldNumber = 2,
    kProtocolFieldNumber = 1,
  };
  // string protocol_name = 3;
  void clear_protocol_name();
  const std::string& protocol_name() const;
  void set_protocol_name(const std::string& value);
  void set_protocol_name(std::string&& value);
  void set_protocol_name(const char* value);
  void set_protocol_name(const char* value, size_t size);
  std::string* mutable_protocol_name();
  std::string* release_protocol_name();
  void set_allocated_protocol_name(std::string* protocol_name);
  private:
  const std::string& _internal_protocol_name() const;
  void _internal_set_protocol_name(const std::string& value);
  std::string* _internal_mutable_protocol_name();
  public:

  // .v2ray.core.common.serial.TypedMessage settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::v2ray::core::common::serial::TypedMessage& settings() const;
  ::v2ray::core::common::serial::TypedMessage* release_settings();
  ::v2ray::core::common::serial::TypedMessage* mutable_settings();
  void set_allocated_settings(::v2ray::core::common::serial::TypedMessage* settings);
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_settings() const;
  ::v2ray::core::common::serial::TypedMessage* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::v2ray::core::common::serial::TypedMessage* settings);
  ::v2ray::core::common::serial::TypedMessage* unsafe_arena_release_settings();

  // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_protocol();
  PROTOBUF_DEPRECATED ::v2ray::core::transport::internet::TransportProtocol protocol() const;
  PROTOBUF_DEPRECATED void set_protocol(::v2ray::core::transport::internet::TransportProtocol value);
  private:
  ::v2ray::core::transport::internet::TransportProtocol _internal_protocol() const;
  void _internal_set_protocol(::v2ray::core::transport::internet::TransportProtocol value);
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.transport.internet.TransportConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_name_;
  ::v2ray::core::common::serial::TypedMessage* settings_;
  int protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2finternet_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class StreamConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.transport.internet.StreamConfig) */ {
 public:
  inline StreamConfig() : StreamConfig(nullptr) {}
  virtual ~StreamConfig();
  explicit constexpr StreamConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamConfig(const StreamConfig& from);
  StreamConfig(StreamConfig&& from) noexcept
    : StreamConfig() {
    *this = ::std::move(from);
  }

  inline StreamConfig& operator=(const StreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamConfig& operator=(StreamConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamConfig* internal_default_instance() {
    return reinterpret_cast<const StreamConfig*>(
               &_StreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamConfig& a, StreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamConfig* New() const final {
    return CreateMaybeMessage<StreamConfig>(nullptr);
  }

  StreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamConfig& from);
  void MergeFrom(const StreamConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.transport.internet.StreamConfig";
  }
  protected:
  explicit StreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_2finternet_2fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportSettingsFieldNumber = 2,
    kSecuritySettingsFieldNumber = 4,
    kSecurityTypeFieldNumber = 3,
    kProtocolNameFieldNumber = 5,
    kSocketSettingsFieldNumber = 6,
    kProtocolFieldNumber = 1,
  };
  // repeated .v2ray.core.transport.internet.TransportConfig transport_settings = 2;
  int transport_settings_size() const;
  private:
  int _internal_transport_settings_size() const;
  public:
  void clear_transport_settings();
  ::v2ray::core::transport::internet::TransportConfig* mutable_transport_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::transport::internet::TransportConfig >*
      mutable_transport_settings();
  private:
  const ::v2ray::core::transport::internet::TransportConfig& _internal_transport_settings(int index) const;
  ::v2ray::core::transport::internet::TransportConfig* _internal_add_transport_settings();
  public:
  const ::v2ray::core::transport::internet::TransportConfig& transport_settings(int index) const;
  ::v2ray::core::transport::internet::TransportConfig* add_transport_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::transport::internet::TransportConfig >&
      transport_settings() const;

  // repeated .v2ray.core.common.serial.TypedMessage security_settings = 4;
  int security_settings_size() const;
  private:
  int _internal_security_settings_size() const;
  public:
  void clear_security_settings();
  ::v2ray::core::common::serial::TypedMessage* mutable_security_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >*
      mutable_security_settings();
  private:
  const ::v2ray::core::common::serial::TypedMessage& _internal_security_settings(int index) const;
  ::v2ray::core::common::serial::TypedMessage* _internal_add_security_settings();
  public:
  const ::v2ray::core::common::serial::TypedMessage& security_settings(int index) const;
  ::v2ray::core::common::serial::TypedMessage* add_security_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >&
      security_settings() const;

  // string security_type = 3;
  void clear_security_type();
  const std::string& security_type() const;
  void set_security_type(const std::string& value);
  void set_security_type(std::string&& value);
  void set_security_type(const char* value);
  void set_security_type(const char* value, size_t size);
  std::string* mutable_security_type();
  std::string* release_security_type();
  void set_allocated_security_type(std::string* security_type);
  private:
  const std::string& _internal_security_type() const;
  void _internal_set_security_type(const std::string& value);
  std::string* _internal_mutable_security_type();
  public:

  // string protocol_name = 5;
  void clear_protocol_name();
  const std::string& protocol_name() const;
  void set_protocol_name(const std::string& value);
  void set_protocol_name(std::string&& value);
  void set_protocol_name(const char* value);
  void set_protocol_name(const char* value, size_t size);
  std::string* mutable_protocol_name();
  std::string* release_protocol_name();
  void set_allocated_protocol_name(std::string* protocol_name);
  private:
  const std::string& _internal_protocol_name() const;
  void _internal_set_protocol_name(const std::string& value);
  std::string* _internal_mutable_protocol_name();
  public:

  // .v2ray.core.transport.internet.SocketConfig socket_settings = 6;
  bool has_socket_settings() const;
  private:
  bool _internal_has_socket_settings() const;
  public:
  void clear_socket_settings();
  const ::v2ray::core::transport::internet::SocketConfig& socket_settings() const;
  ::v2ray::core::transport::internet::SocketConfig* release_socket_settings();
  ::v2ray::core::transport::internet::SocketConfig* mutable_socket_settings();
  void set_allocated_socket_settings(::v2ray::core::transport::internet::SocketConfig* socket_settings);
  private:
  const ::v2ray::core::transport::internet::SocketConfig& _internal_socket_settings() const;
  ::v2ray::core::transport::internet::SocketConfig* _internal_mutable_socket_settings();
  public:
  void unsafe_arena_set_allocated_socket_settings(
      ::v2ray::core::transport::internet::SocketConfig* socket_settings);
  ::v2ray::core::transport::internet::SocketConfig* unsafe_arena_release_socket_settings();

  // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_protocol();
  PROTOBUF_DEPRECATED ::v2ray::core::transport::internet::TransportProtocol protocol() const;
  PROTOBUF_DEPRECATED void set_protocol(::v2ray::core::transport::internet::TransportProtocol value);
  private:
  ::v2ray::core::transport::internet::TransportProtocol _internal_protocol() const;
  void _internal_set_protocol(::v2ray::core::transport::internet::TransportProtocol value);
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.transport.internet.StreamConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::transport::internet::TransportConfig > transport_settings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage > security_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_name_;
  ::v2ray::core::transport::internet::SocketConfig* socket_settings_;
  int protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2finternet_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ProxyConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.transport.internet.ProxyConfig) */ {
 public:
  inline ProxyConfig() : ProxyConfig(nullptr) {}
  virtual ~ProxyConfig();
  explicit constexpr ProxyConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyConfig(const ProxyConfig& from);
  ProxyConfig(ProxyConfig&& from) noexcept
    : ProxyConfig() {
    *this = ::std::move(from);
  }

  inline ProxyConfig& operator=(const ProxyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyConfig& operator=(ProxyConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyConfig* internal_default_instance() {
    return reinterpret_cast<const ProxyConfig*>(
               &_ProxyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProxyConfig& a, ProxyConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyConfig* New() const final {
    return CreateMaybeMessage<ProxyConfig>(nullptr);
  }

  ProxyConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyConfig& from);
  void MergeFrom(const ProxyConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.transport.internet.ProxyConfig";
  }
  protected:
  explicit ProxyConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_2finternet_2fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kTransportLayerProxyFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // bool transportLayerProxy = 2;
  void clear_transportlayerproxy();
  bool transportlayerproxy() const;
  void set_transportlayerproxy(bool value);
  private:
  bool _internal_transportlayerproxy() const;
  void _internal_set_transportlayerproxy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.transport.internet.ProxyConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  bool transportlayerproxy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2finternet_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class SocketConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v2ray.core.transport.internet.SocketConfig) */ {
 public:
  inline SocketConfig() : SocketConfig(nullptr) {}
  virtual ~SocketConfig();
  explicit constexpr SocketConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketConfig(const SocketConfig& from);
  SocketConfig(SocketConfig&& from) noexcept
    : SocketConfig() {
    *this = ::std::move(from);
  }

  inline SocketConfig& operator=(const SocketConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketConfig& operator=(SocketConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SocketConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketConfig* internal_default_instance() {
    return reinterpret_cast<const SocketConfig*>(
               &_SocketConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SocketConfig& a, SocketConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SocketConfig* New() const final {
    return CreateMaybeMessage<SocketConfig>(nullptr);
  }

  SocketConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SocketConfig& from);
  void MergeFrom(const SocketConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v2ray.core.transport.internet.SocketConfig";
  }
  protected:
  explicit SocketConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_2finternet_2fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SocketConfig_TCPFastOpenState TCPFastOpenState;
  static constexpr TCPFastOpenState AsIs =
    SocketConfig_TCPFastOpenState_AsIs;
  static constexpr TCPFastOpenState Enable =
    SocketConfig_TCPFastOpenState_Enable;
  static constexpr TCPFastOpenState Disable =
    SocketConfig_TCPFastOpenState_Disable;
  static inline bool TCPFastOpenState_IsValid(int value) {
    return SocketConfig_TCPFastOpenState_IsValid(value);
  }
  static constexpr TCPFastOpenState TCPFastOpenState_MIN =
    SocketConfig_TCPFastOpenState_TCPFastOpenState_MIN;
  static constexpr TCPFastOpenState TCPFastOpenState_MAX =
    SocketConfig_TCPFastOpenState_TCPFastOpenState_MAX;
  static constexpr int TCPFastOpenState_ARRAYSIZE =
    SocketConfig_TCPFastOpenState_TCPFastOpenState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TCPFastOpenState_descriptor() {
    return SocketConfig_TCPFastOpenState_descriptor();
  }
  template<typename T>
  static inline const std::string& TCPFastOpenState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TCPFastOpenState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TCPFastOpenState_Name.");
    return SocketConfig_TCPFastOpenState_Name(enum_t_value);
  }
  static inline bool TCPFastOpenState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TCPFastOpenState* value) {
    return SocketConfig_TCPFastOpenState_Parse(name, value);
  }

  typedef SocketConfig_TProxyMode TProxyMode;
  static constexpr TProxyMode Off =
    SocketConfig_TProxyMode_Off;
  static constexpr TProxyMode TProxy =
    SocketConfig_TProxyMode_TProxy;
  static constexpr TProxyMode Redirect =
    SocketConfig_TProxyMode_Redirect;
  static inline bool TProxyMode_IsValid(int value) {
    return SocketConfig_TProxyMode_IsValid(value);
  }
  static constexpr TProxyMode TProxyMode_MIN =
    SocketConfig_TProxyMode_TProxyMode_MIN;
  static constexpr TProxyMode TProxyMode_MAX =
    SocketConfig_TProxyMode_TProxyMode_MAX;
  static constexpr int TProxyMode_ARRAYSIZE =
    SocketConfig_TProxyMode_TProxyMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TProxyMode_descriptor() {
    return SocketConfig_TProxyMode_descriptor();
  }
  template<typename T>
  static inline const std::string& TProxyMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TProxyMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TProxyMode_Name.");
    return SocketConfig_TProxyMode_Name(enum_t_value);
  }
  static inline bool TProxyMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TProxyMode* value) {
    return SocketConfig_TProxyMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBindAddressFieldNumber = 5,
    kMarkFieldNumber = 1,
    kTfoFieldNumber = 2,
    kTproxyFieldNumber = 3,
    kReceiveOriginalDestAddressFieldNumber = 4,
    kAcceptProxyProtocolFieldNumber = 7,
    kBindPortFieldNumber = 6,
    kTcpKeepAliveIntervalFieldNumber = 8,
  };
  // bytes bind_address = 5;
  void clear_bind_address();
  const std::string& bind_address() const;
  void set_bind_address(const std::string& value);
  void set_bind_address(std::string&& value);
  void set_bind_address(const char* value);
  void set_bind_address(const void* value, size_t size);
  std::string* mutable_bind_address();
  std::string* release_bind_address();
  void set_allocated_bind_address(std::string* bind_address);
  private:
  const std::string& _internal_bind_address() const;
  void _internal_set_bind_address(const std::string& value);
  std::string* _internal_mutable_bind_address();
  public:

  // int32 mark = 1;
  void clear_mark();
  ::PROTOBUF_NAMESPACE_ID::int32 mark() const;
  void set_mark(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mark() const;
  void _internal_set_mark(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .v2ray.core.transport.internet.SocketConfig.TCPFastOpenState tfo = 2;
  void clear_tfo();
  ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState tfo() const;
  void set_tfo(::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState value);
  private:
  ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState _internal_tfo() const;
  void _internal_set_tfo(::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState value);
  public:

  // .v2ray.core.transport.internet.SocketConfig.TProxyMode tproxy = 3;
  void clear_tproxy();
  ::v2ray::core::transport::internet::SocketConfig_TProxyMode tproxy() const;
  void set_tproxy(::v2ray::core::transport::internet::SocketConfig_TProxyMode value);
  private:
  ::v2ray::core::transport::internet::SocketConfig_TProxyMode _internal_tproxy() const;
  void _internal_set_tproxy(::v2ray::core::transport::internet::SocketConfig_TProxyMode value);
  public:

  // bool receive_original_dest_address = 4;
  void clear_receive_original_dest_address();
  bool receive_original_dest_address() const;
  void set_receive_original_dest_address(bool value);
  private:
  bool _internal_receive_original_dest_address() const;
  void _internal_set_receive_original_dest_address(bool value);
  public:

  // bool accept_proxy_protocol = 7;
  void clear_accept_proxy_protocol();
  bool accept_proxy_protocol() const;
  void set_accept_proxy_protocol(bool value);
  private:
  bool _internal_accept_proxy_protocol() const;
  void _internal_set_accept_proxy_protocol(bool value);
  public:

  // uint32 bind_port = 6;
  void clear_bind_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 bind_port() const;
  void set_bind_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bind_port() const;
  void _internal_set_bind_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 tcp_keep_alive_interval = 8;
  void clear_tcp_keep_alive_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 tcp_keep_alive_interval() const;
  void set_tcp_keep_alive_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tcp_keep_alive_interval() const;
  void _internal_set_tcp_keep_alive_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:v2ray.core.transport.internet.SocketConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bind_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 mark_;
  int tfo_;
  int tproxy_;
  bool receive_original_dest_address_;
  bool accept_proxy_protocol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bind_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 tcp_keep_alive_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_2finternet_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransportConfig

// .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
inline void TransportConfig::clear_protocol() {
  protocol_ = 0;
}
inline ::v2ray::core::transport::internet::TransportProtocol TransportConfig::_internal_protocol() const {
  return static_cast< ::v2ray::core::transport::internet::TransportProtocol >(protocol_);
}
inline ::v2ray::core::transport::internet::TransportProtocol TransportConfig::protocol() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.TransportConfig.protocol)
  return _internal_protocol();
}
inline void TransportConfig::_internal_set_protocol(::v2ray::core::transport::internet::TransportProtocol value) {
  
  protocol_ = value;
}
inline void TransportConfig::set_protocol(::v2ray::core::transport::internet::TransportProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.TransportConfig.protocol)
}

// string protocol_name = 3;
inline void TransportConfig::clear_protocol_name() {
  protocol_name_.ClearToEmpty();
}
inline const std::string& TransportConfig::protocol_name() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.TransportConfig.protocol_name)
  return _internal_protocol_name();
}
inline void TransportConfig::set_protocol_name(const std::string& value) {
  _internal_set_protocol_name(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.TransportConfig.protocol_name)
}
inline std::string* TransportConfig::mutable_protocol_name() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.TransportConfig.protocol_name)
  return _internal_mutable_protocol_name();
}
inline const std::string& TransportConfig::_internal_protocol_name() const {
  return protocol_name_.Get();
}
inline void TransportConfig::_internal_set_protocol_name(const std::string& value) {
  
  protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransportConfig::set_protocol_name(std::string&& value) {
  
  protocol_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.transport.internet.TransportConfig.protocol_name)
}
inline void TransportConfig::set_protocol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.transport.internet.TransportConfig.protocol_name)
}
inline void TransportConfig::set_protocol_name(const char* value,
    size_t size) {
  
  protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.transport.internet.TransportConfig.protocol_name)
}
inline std::string* TransportConfig::_internal_mutable_protocol_name() {
  
  return protocol_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransportConfig::release_protocol_name() {
  // @@protoc_insertion_point(field_release:v2ray.core.transport.internet.TransportConfig.protocol_name)
  return protocol_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransportConfig::set_allocated_protocol_name(std::string* protocol_name) {
  if (protocol_name != nullptr) {
    
  } else {
    
  }
  protocol_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.transport.internet.TransportConfig.protocol_name)
}

// .v2ray.core.common.serial.TypedMessage settings = 2;
inline bool TransportConfig::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool TransportConfig::has_settings() const {
  return _internal_has_settings();
}
inline const ::v2ray::core::common::serial::TypedMessage& TransportConfig::_internal_settings() const {
  const ::v2ray::core::common::serial::TypedMessage* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::common::serial::TypedMessage&>(
      ::v2ray::core::common::serial::_TypedMessage_default_instance_);
}
inline const ::v2ray::core::common::serial::TypedMessage& TransportConfig::settings() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.TransportConfig.settings)
  return _internal_settings();
}
inline void TransportConfig::unsafe_arena_set_allocated_settings(
    ::v2ray::core::common::serial::TypedMessage* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.transport.internet.TransportConfig.settings)
}
inline ::v2ray::core::common::serial::TypedMessage* TransportConfig::release_settings() {
  
  ::v2ray::core::common::serial::TypedMessage* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* TransportConfig::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:v2ray.core.transport.internet.TransportConfig.settings)
  
  ::v2ray::core::common::serial::TypedMessage* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::v2ray::core::common::serial::TypedMessage* TransportConfig::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::common::serial::TypedMessage>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::v2ray::core::common::serial::TypedMessage* TransportConfig::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.TransportConfig.settings)
  return _internal_mutable_settings();
}
inline void TransportConfig::set_allocated_settings(::v2ray::core::common::serial::TypedMessage* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings)->GetArena();
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.transport.internet.TransportConfig.settings)
}

// -------------------------------------------------------------------

// StreamConfig

// .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
inline void StreamConfig::clear_protocol() {
  protocol_ = 0;
}
inline ::v2ray::core::transport::internet::TransportProtocol StreamConfig::_internal_protocol() const {
  return static_cast< ::v2ray::core::transport::internet::TransportProtocol >(protocol_);
}
inline ::v2ray::core::transport::internet::TransportProtocol StreamConfig::protocol() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.StreamConfig.protocol)
  return _internal_protocol();
}
inline void StreamConfig::_internal_set_protocol(::v2ray::core::transport::internet::TransportProtocol value) {
  
  protocol_ = value;
}
inline void StreamConfig::set_protocol(::v2ray::core::transport::internet::TransportProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.StreamConfig.protocol)
}

// string protocol_name = 5;
inline void StreamConfig::clear_protocol_name() {
  protocol_name_.ClearToEmpty();
}
inline const std::string& StreamConfig::protocol_name() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.StreamConfig.protocol_name)
  return _internal_protocol_name();
}
inline void StreamConfig::set_protocol_name(const std::string& value) {
  _internal_set_protocol_name(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.StreamConfig.protocol_name)
}
inline std::string* StreamConfig::mutable_protocol_name() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.StreamConfig.protocol_name)
  return _internal_mutable_protocol_name();
}
inline const std::string& StreamConfig::_internal_protocol_name() const {
  return protocol_name_.Get();
}
inline void StreamConfig::_internal_set_protocol_name(const std::string& value) {
  
  protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamConfig::set_protocol_name(std::string&& value) {
  
  protocol_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.transport.internet.StreamConfig.protocol_name)
}
inline void StreamConfig::set_protocol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.transport.internet.StreamConfig.protocol_name)
}
inline void StreamConfig::set_protocol_name(const char* value,
    size_t size) {
  
  protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.transport.internet.StreamConfig.protocol_name)
}
inline std::string* StreamConfig::_internal_mutable_protocol_name() {
  
  return protocol_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamConfig::release_protocol_name() {
  // @@protoc_insertion_point(field_release:v2ray.core.transport.internet.StreamConfig.protocol_name)
  return protocol_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamConfig::set_allocated_protocol_name(std::string* protocol_name) {
  if (protocol_name != nullptr) {
    
  } else {
    
  }
  protocol_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.transport.internet.StreamConfig.protocol_name)
}

// repeated .v2ray.core.transport.internet.TransportConfig transport_settings = 2;
inline int StreamConfig::_internal_transport_settings_size() const {
  return transport_settings_.size();
}
inline int StreamConfig::transport_settings_size() const {
  return _internal_transport_settings_size();
}
inline void StreamConfig::clear_transport_settings() {
  transport_settings_.Clear();
}
inline ::v2ray::core::transport::internet::TransportConfig* StreamConfig::mutable_transport_settings(int index) {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.StreamConfig.transport_settings)
  return transport_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::transport::internet::TransportConfig >*
StreamConfig::mutable_transport_settings() {
  // @@protoc_insertion_point(field_mutable_list:v2ray.core.transport.internet.StreamConfig.transport_settings)
  return &transport_settings_;
}
inline const ::v2ray::core::transport::internet::TransportConfig& StreamConfig::_internal_transport_settings(int index) const {
  return transport_settings_.Get(index);
}
inline const ::v2ray::core::transport::internet::TransportConfig& StreamConfig::transport_settings(int index) const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.StreamConfig.transport_settings)
  return _internal_transport_settings(index);
}
inline ::v2ray::core::transport::internet::TransportConfig* StreamConfig::_internal_add_transport_settings() {
  return transport_settings_.Add();
}
inline ::v2ray::core::transport::internet::TransportConfig* StreamConfig::add_transport_settings() {
  // @@protoc_insertion_point(field_add:v2ray.core.transport.internet.StreamConfig.transport_settings)
  return _internal_add_transport_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::transport::internet::TransportConfig >&
StreamConfig::transport_settings() const {
  // @@protoc_insertion_point(field_list:v2ray.core.transport.internet.StreamConfig.transport_settings)
  return transport_settings_;
}

// string security_type = 3;
inline void StreamConfig::clear_security_type() {
  security_type_.ClearToEmpty();
}
inline const std::string& StreamConfig::security_type() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.StreamConfig.security_type)
  return _internal_security_type();
}
inline void StreamConfig::set_security_type(const std::string& value) {
  _internal_set_security_type(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.StreamConfig.security_type)
}
inline std::string* StreamConfig::mutable_security_type() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.StreamConfig.security_type)
  return _internal_mutable_security_type();
}
inline const std::string& StreamConfig::_internal_security_type() const {
  return security_type_.Get();
}
inline void StreamConfig::_internal_set_security_type(const std::string& value) {
  
  security_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StreamConfig::set_security_type(std::string&& value) {
  
  security_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.transport.internet.StreamConfig.security_type)
}
inline void StreamConfig::set_security_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.transport.internet.StreamConfig.security_type)
}
inline void StreamConfig::set_security_type(const char* value,
    size_t size) {
  
  security_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.transport.internet.StreamConfig.security_type)
}
inline std::string* StreamConfig::_internal_mutable_security_type() {
  
  return security_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StreamConfig::release_security_type() {
  // @@protoc_insertion_point(field_release:v2ray.core.transport.internet.StreamConfig.security_type)
  return security_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamConfig::set_allocated_security_type(std::string* security_type) {
  if (security_type != nullptr) {
    
  } else {
    
  }
  security_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.transport.internet.StreamConfig.security_type)
}

// repeated .v2ray.core.common.serial.TypedMessage security_settings = 4;
inline int StreamConfig::_internal_security_settings_size() const {
  return security_settings_.size();
}
inline int StreamConfig::security_settings_size() const {
  return _internal_security_settings_size();
}
inline ::v2ray::core::common::serial::TypedMessage* StreamConfig::mutable_security_settings(int index) {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.StreamConfig.security_settings)
  return security_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >*
StreamConfig::mutable_security_settings() {
  // @@protoc_insertion_point(field_mutable_list:v2ray.core.transport.internet.StreamConfig.security_settings)
  return &security_settings_;
}
inline const ::v2ray::core::common::serial::TypedMessage& StreamConfig::_internal_security_settings(int index) const {
  return security_settings_.Get(index);
}
inline const ::v2ray::core::common::serial::TypedMessage& StreamConfig::security_settings(int index) const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.StreamConfig.security_settings)
  return _internal_security_settings(index);
}
inline ::v2ray::core::common::serial::TypedMessage* StreamConfig::_internal_add_security_settings() {
  return security_settings_.Add();
}
inline ::v2ray::core::common::serial::TypedMessage* StreamConfig::add_security_settings() {
  // @@protoc_insertion_point(field_add:v2ray.core.transport.internet.StreamConfig.security_settings)
  return _internal_add_security_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v2ray::core::common::serial::TypedMessage >&
StreamConfig::security_settings() const {
  // @@protoc_insertion_point(field_list:v2ray.core.transport.internet.StreamConfig.security_settings)
  return security_settings_;
}

// .v2ray.core.transport.internet.SocketConfig socket_settings = 6;
inline bool StreamConfig::_internal_has_socket_settings() const {
  return this != internal_default_instance() && socket_settings_ != nullptr;
}
inline bool StreamConfig::has_socket_settings() const {
  return _internal_has_socket_settings();
}
inline void StreamConfig::clear_socket_settings() {
  if (GetArena() == nullptr && socket_settings_ != nullptr) {
    delete socket_settings_;
  }
  socket_settings_ = nullptr;
}
inline const ::v2ray::core::transport::internet::SocketConfig& StreamConfig::_internal_socket_settings() const {
  const ::v2ray::core::transport::internet::SocketConfig* p = socket_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::v2ray::core::transport::internet::SocketConfig&>(
      ::v2ray::core::transport::internet::_SocketConfig_default_instance_);
}
inline const ::v2ray::core::transport::internet::SocketConfig& StreamConfig::socket_settings() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.StreamConfig.socket_settings)
  return _internal_socket_settings();
}
inline void StreamConfig::unsafe_arena_set_allocated_socket_settings(
    ::v2ray::core::transport::internet::SocketConfig* socket_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(socket_settings_);
  }
  socket_settings_ = socket_settings;
  if (socket_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v2ray.core.transport.internet.StreamConfig.socket_settings)
}
inline ::v2ray::core::transport::internet::SocketConfig* StreamConfig::release_socket_settings() {
  
  ::v2ray::core::transport::internet::SocketConfig* temp = socket_settings_;
  socket_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v2ray::core::transport::internet::SocketConfig* StreamConfig::unsafe_arena_release_socket_settings() {
  // @@protoc_insertion_point(field_release:v2ray.core.transport.internet.StreamConfig.socket_settings)
  
  ::v2ray::core::transport::internet::SocketConfig* temp = socket_settings_;
  socket_settings_ = nullptr;
  return temp;
}
inline ::v2ray::core::transport::internet::SocketConfig* StreamConfig::_internal_mutable_socket_settings() {
  
  if (socket_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::v2ray::core::transport::internet::SocketConfig>(GetArena());
    socket_settings_ = p;
  }
  return socket_settings_;
}
inline ::v2ray::core::transport::internet::SocketConfig* StreamConfig::mutable_socket_settings() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.StreamConfig.socket_settings)
  return _internal_mutable_socket_settings();
}
inline void StreamConfig::set_allocated_socket_settings(::v2ray::core::transport::internet::SocketConfig* socket_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete socket_settings_;
  }
  if (socket_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(socket_settings);
    if (message_arena != submessage_arena) {
      socket_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socket_settings, submessage_arena);
    }
    
  } else {
    
  }
  socket_settings_ = socket_settings;
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.transport.internet.StreamConfig.socket_settings)
}

// -------------------------------------------------------------------

// ProxyConfig

// string tag = 1;
inline void ProxyConfig::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& ProxyConfig::tag() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.ProxyConfig.tag)
  return _internal_tag();
}
inline void ProxyConfig::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.ProxyConfig.tag)
}
inline std::string* ProxyConfig::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.ProxyConfig.tag)
  return _internal_mutable_tag();
}
inline const std::string& ProxyConfig::_internal_tag() const {
  return tag_.Get();
}
inline void ProxyConfig::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProxyConfig::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.transport.internet.ProxyConfig.tag)
}
inline void ProxyConfig::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.transport.internet.ProxyConfig.tag)
}
inline void ProxyConfig::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.transport.internet.ProxyConfig.tag)
}
inline std::string* ProxyConfig::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProxyConfig::release_tag() {
  // @@protoc_insertion_point(field_release:v2ray.core.transport.internet.ProxyConfig.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProxyConfig::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.transport.internet.ProxyConfig.tag)
}

// bool transportLayerProxy = 2;
inline void ProxyConfig::clear_transportlayerproxy() {
  transportlayerproxy_ = false;
}
inline bool ProxyConfig::_internal_transportlayerproxy() const {
  return transportlayerproxy_;
}
inline bool ProxyConfig::transportlayerproxy() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.ProxyConfig.transportLayerProxy)
  return _internal_transportlayerproxy();
}
inline void ProxyConfig::_internal_set_transportlayerproxy(bool value) {
  
  transportlayerproxy_ = value;
}
inline void ProxyConfig::set_transportlayerproxy(bool value) {
  _internal_set_transportlayerproxy(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.ProxyConfig.transportLayerProxy)
}

// -------------------------------------------------------------------

// SocketConfig

// int32 mark = 1;
inline void SocketConfig::clear_mark() {
  mark_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SocketConfig::_internal_mark() const {
  return mark_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SocketConfig::mark() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.mark)
  return _internal_mark();
}
inline void SocketConfig::_internal_set_mark(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mark_ = value;
}
inline void SocketConfig::set_mark(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mark(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.mark)
}

// .v2ray.core.transport.internet.SocketConfig.TCPFastOpenState tfo = 2;
inline void SocketConfig::clear_tfo() {
  tfo_ = 0;
}
inline ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState SocketConfig::_internal_tfo() const {
  return static_cast< ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState >(tfo_);
}
inline ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState SocketConfig::tfo() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.tfo)
  return _internal_tfo();
}
inline void SocketConfig::_internal_set_tfo(::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState value) {
  
  tfo_ = value;
}
inline void SocketConfig::set_tfo(::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState value) {
  _internal_set_tfo(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.tfo)
}

// .v2ray.core.transport.internet.SocketConfig.TProxyMode tproxy = 3;
inline void SocketConfig::clear_tproxy() {
  tproxy_ = 0;
}
inline ::v2ray::core::transport::internet::SocketConfig_TProxyMode SocketConfig::_internal_tproxy() const {
  return static_cast< ::v2ray::core::transport::internet::SocketConfig_TProxyMode >(tproxy_);
}
inline ::v2ray::core::transport::internet::SocketConfig_TProxyMode SocketConfig::tproxy() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.tproxy)
  return _internal_tproxy();
}
inline void SocketConfig::_internal_set_tproxy(::v2ray::core::transport::internet::SocketConfig_TProxyMode value) {
  
  tproxy_ = value;
}
inline void SocketConfig::set_tproxy(::v2ray::core::transport::internet::SocketConfig_TProxyMode value) {
  _internal_set_tproxy(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.tproxy)
}

// bool receive_original_dest_address = 4;
inline void SocketConfig::clear_receive_original_dest_address() {
  receive_original_dest_address_ = false;
}
inline bool SocketConfig::_internal_receive_original_dest_address() const {
  return receive_original_dest_address_;
}
inline bool SocketConfig::receive_original_dest_address() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.receive_original_dest_address)
  return _internal_receive_original_dest_address();
}
inline void SocketConfig::_internal_set_receive_original_dest_address(bool value) {
  
  receive_original_dest_address_ = value;
}
inline void SocketConfig::set_receive_original_dest_address(bool value) {
  _internal_set_receive_original_dest_address(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.receive_original_dest_address)
}

// bytes bind_address = 5;
inline void SocketConfig::clear_bind_address() {
  bind_address_.ClearToEmpty();
}
inline const std::string& SocketConfig::bind_address() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.bind_address)
  return _internal_bind_address();
}
inline void SocketConfig::set_bind_address(const std::string& value) {
  _internal_set_bind_address(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.bind_address)
}
inline std::string* SocketConfig::mutable_bind_address() {
  // @@protoc_insertion_point(field_mutable:v2ray.core.transport.internet.SocketConfig.bind_address)
  return _internal_mutable_bind_address();
}
inline const std::string& SocketConfig::_internal_bind_address() const {
  return bind_address_.Get();
}
inline void SocketConfig::_internal_set_bind_address(const std::string& value) {
  
  bind_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SocketConfig::set_bind_address(std::string&& value) {
  
  bind_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:v2ray.core.transport.internet.SocketConfig.bind_address)
}
inline void SocketConfig::set_bind_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bind_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:v2ray.core.transport.internet.SocketConfig.bind_address)
}
inline void SocketConfig::set_bind_address(const void* value,
    size_t size) {
  
  bind_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:v2ray.core.transport.internet.SocketConfig.bind_address)
}
inline std::string* SocketConfig::_internal_mutable_bind_address() {
  
  return bind_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SocketConfig::release_bind_address() {
  // @@protoc_insertion_point(field_release:v2ray.core.transport.internet.SocketConfig.bind_address)
  return bind_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SocketConfig::set_allocated_bind_address(std::string* bind_address) {
  if (bind_address != nullptr) {
    
  } else {
    
  }
  bind_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bind_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:v2ray.core.transport.internet.SocketConfig.bind_address)
}

// uint32 bind_port = 6;
inline void SocketConfig::clear_bind_port() {
  bind_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketConfig::_internal_bind_port() const {
  return bind_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketConfig::bind_port() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.bind_port)
  return _internal_bind_port();
}
inline void SocketConfig::_internal_set_bind_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bind_port_ = value;
}
inline void SocketConfig::set_bind_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bind_port(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.bind_port)
}

// bool accept_proxy_protocol = 7;
inline void SocketConfig::clear_accept_proxy_protocol() {
  accept_proxy_protocol_ = false;
}
inline bool SocketConfig::_internal_accept_proxy_protocol() const {
  return accept_proxy_protocol_;
}
inline bool SocketConfig::accept_proxy_protocol() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.accept_proxy_protocol)
  return _internal_accept_proxy_protocol();
}
inline void SocketConfig::_internal_set_accept_proxy_protocol(bool value) {
  
  accept_proxy_protocol_ = value;
}
inline void SocketConfig::set_accept_proxy_protocol(bool value) {
  _internal_set_accept_proxy_protocol(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.accept_proxy_protocol)
}

// int32 tcp_keep_alive_interval = 8;
inline void SocketConfig::clear_tcp_keep_alive_interval() {
  tcp_keep_alive_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SocketConfig::_internal_tcp_keep_alive_interval() const {
  return tcp_keep_alive_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SocketConfig::tcp_keep_alive_interval() const {
  // @@protoc_insertion_point(field_get:v2ray.core.transport.internet.SocketConfig.tcp_keep_alive_interval)
  return _internal_tcp_keep_alive_interval();
}
inline void SocketConfig::_internal_set_tcp_keep_alive_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tcp_keep_alive_interval_ = value;
}
inline void SocketConfig::set_tcp_keep_alive_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tcp_keep_alive_interval(value);
  // @@protoc_insertion_point(field_set:v2ray.core.transport.internet.SocketConfig.tcp_keep_alive_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internet
}  // namespace transport
}  // namespace core
}  // namespace v2ray

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState>() {
  return ::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState_descriptor();
}
template <> struct is_proto_enum< ::v2ray::core::transport::internet::SocketConfig_TProxyMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v2ray::core::transport::internet::SocketConfig_TProxyMode>() {
  return ::v2ray::core::transport::internet::SocketConfig_TProxyMode_descriptor();
}
template <> struct is_proto_enum< ::v2ray::core::transport::internet::TransportProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v2ray::core::transport::internet::TransportProtocol>() {
  return ::v2ray::core::transport::internet::TransportProtocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_2finternet_2fconfig_2eproto
