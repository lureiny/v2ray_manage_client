// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport/internet/config.proto

#include "transport/internet/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v2ray {
namespace core {
namespace transport {
namespace internet {
constexpr TransportConfig::TransportConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr)
  , protocol_(0)
{}
struct TransportConfigDefaultTypeInternal {
  constexpr TransportConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportConfigDefaultTypeInternal() {}
  union {
    TransportConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportConfigDefaultTypeInternal _TransportConfig_default_instance_;
constexpr StreamConfig::StreamConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transport_settings_()
  , security_settings_()
  , security_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , socket_settings_(nullptr)
  , protocol_(0)
{}
struct StreamConfigDefaultTypeInternal {
  constexpr StreamConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamConfigDefaultTypeInternal() {}
  union {
    StreamConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamConfigDefaultTypeInternal _StreamConfig_default_instance_;
constexpr ProxyConfig::ProxyConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transportlayerproxy_(false){}
struct ProxyConfigDefaultTypeInternal {
  constexpr ProxyConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProxyConfigDefaultTypeInternal() {}
  union {
    ProxyConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProxyConfigDefaultTypeInternal _ProxyConfig_default_instance_;
constexpr SocketConfig::SocketConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bind_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mark_(0)
  , tfo_(0)

  , tproxy_(0)

  , receive_original_dest_address_(false)
  , accept_proxy_protocol_(false)
  , bind_port_(0u)
  , tcp_keep_alive_interval_(0){}
struct SocketConfigDefaultTypeInternal {
  constexpr SocketConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketConfigDefaultTypeInternal() {}
  union {
    SocketConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketConfigDefaultTypeInternal _SocketConfig_default_instance_;
}  // namespace internet
}  // namespace transport
}  // namespace core
}  // namespace v2ray
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_2finternet_2fconfig_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_2finternet_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_2finternet_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::TransportConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::TransportConfig, protocol_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::TransportConfig, protocol_name_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::TransportConfig, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::StreamConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::StreamConfig, protocol_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::StreamConfig, protocol_name_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::StreamConfig, transport_settings_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::StreamConfig, security_type_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::StreamConfig, security_settings_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::StreamConfig, socket_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::ProxyConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::ProxyConfig, tag_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::ProxyConfig, transportlayerproxy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, mark_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, tfo_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, tproxy_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, receive_original_dest_address_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, bind_address_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, bind_port_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, accept_proxy_protocol_),
  PROTOBUF_FIELD_OFFSET(::v2ray::core::transport::internet::SocketConfig, tcp_keep_alive_interval_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v2ray::core::transport::internet::TransportConfig)},
  { 8, -1, sizeof(::v2ray::core::transport::internet::StreamConfig)},
  { 19, -1, sizeof(::v2ray::core::transport::internet::ProxyConfig)},
  { 26, -1, sizeof(::v2ray::core::transport::internet::SocketConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::transport::internet::_TransportConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::transport::internet::_StreamConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::transport::internet::_ProxyConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v2ray::core::transport::internet::_SocketConfig_default_instance_),
};

const char descriptor_table_protodef_transport_2finternet_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037transport/internet/config.proto\022\035v2ray"
  ".core.transport.internet\032!common/serial/"
  "typed_message.proto\"\252\001\n\017TransportConfig\022"
  "F\n\010protocol\030\001 \001(\01620.v2ray.core.transport"
  ".internet.TransportProtocolB\002\030\001\022\025\n\rproto"
  "col_name\030\003 \001(\t\0228\n\010settings\030\002 \001(\0132&.v2ray"
  ".core.common.serial.TypedMessage\"\331\002\n\014Str"
  "eamConfig\022F\n\010protocol\030\001 \001(\01620.v2ray.core"
  ".transport.internet.TransportProtocolB\002\030"
  "\001\022\025\n\rprotocol_name\030\005 \001(\t\022J\n\022transport_se"
  "ttings\030\002 \003(\0132..v2ray.core.transport.inte"
  "rnet.TransportConfig\022\025\n\rsecurity_type\030\003 "
  "\001(\t\022A\n\021security_settings\030\004 \003(\0132&.v2ray.c"
  "ore.common.serial.TypedMessage\022D\n\017socket"
  "_settings\030\006 \001(\0132+.v2ray.core.transport.i"
  "nternet.SocketConfig\"7\n\013ProxyConfig\022\013\n\003t"
  "ag\030\001 \001(\t\022\033\n\023transportLayerProxy\030\002 \001(\010\"\247\003"
  "\n\014SocketConfig\022\014\n\004mark\030\001 \001(\005\022I\n\003tfo\030\002 \001("
  "\0162<.v2ray.core.transport.internet.Socket"
  "Config.TCPFastOpenState\022F\n\006tproxy\030\003 \001(\0162"
  "6.v2ray.core.transport.internet.SocketCo"
  "nfig.TProxyMode\022%\n\035receive_original_dest"
  "_address\030\004 \001(\010\022\024\n\014bind_address\030\005 \001(\014\022\021\n\t"
  "bind_port\030\006 \001(\r\022\035\n\025accept_proxy_protocol"
  "\030\007 \001(\010\022\037\n\027tcp_keep_alive_interval\030\010 \001(\005\""
  "5\n\020TCPFastOpenState\022\010\n\004AsIs\020\000\022\n\n\006Enable\020"
  "\001\022\013\n\007Disable\020\002\"/\n\nTProxyMode\022\007\n\003Off\020\000\022\n\n"
  "\006TProxy\020\001\022\014\n\010Redirect\020\002*Z\n\021TransportProt"
  "ocol\022\007\n\003TCP\020\000\022\007\n\003UDP\020\001\022\010\n\004MKCP\020\002\022\r\n\tWebS"
  "ocket\020\003\022\010\n\004HTTP\020\004\022\020\n\014DomainSocket\020\005Bx\n!c"
  "om.v2ray.core.transport.internetP\001Z1gith"
  "ub.com/v2fly/v2ray-core/v4/transport/int"
  "ernet\252\002\035V2Ray.Core.Transport.Internetb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_2finternet_2fconfig_2eproto_deps[1] = {
  &::descriptor_table_common_2fserial_2ftyped_5fmessage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_2finternet_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_2finternet_2fconfig_2eproto = {
  false, false, 1325, descriptor_table_protodef_transport_2finternet_2fconfig_2eproto, "transport/internet/config.proto", 
  &descriptor_table_transport_2finternet_2fconfig_2eproto_once, descriptor_table_transport_2finternet_2fconfig_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_transport_2finternet_2fconfig_2eproto::offsets,
  file_level_metadata_transport_2finternet_2fconfig_2eproto, file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto, file_level_service_descriptors_transport_2finternet_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_transport_2finternet_2fconfig_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2fconfig_2eproto);
  return descriptor_table_transport_2finternet_2fconfig_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transport_2finternet_2fconfig_2eproto(&descriptor_table_transport_2finternet_2fconfig_2eproto);
namespace v2ray {
namespace core {
namespace transport {
namespace internet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SocketConfig_TCPFastOpenState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2fconfig_2eproto);
  return file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[0];
}
bool SocketConfig_TCPFastOpenState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SocketConfig_TCPFastOpenState SocketConfig::AsIs;
constexpr SocketConfig_TCPFastOpenState SocketConfig::Enable;
constexpr SocketConfig_TCPFastOpenState SocketConfig::Disable;
constexpr SocketConfig_TCPFastOpenState SocketConfig::TCPFastOpenState_MIN;
constexpr SocketConfig_TCPFastOpenState SocketConfig::TCPFastOpenState_MAX;
constexpr int SocketConfig::TCPFastOpenState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SocketConfig_TProxyMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2fconfig_2eproto);
  return file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[1];
}
bool SocketConfig_TProxyMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SocketConfig_TProxyMode SocketConfig::Off;
constexpr SocketConfig_TProxyMode SocketConfig::TProxy;
constexpr SocketConfig_TProxyMode SocketConfig::Redirect;
constexpr SocketConfig_TProxyMode SocketConfig::TProxyMode_MIN;
constexpr SocketConfig_TProxyMode SocketConfig::TProxyMode_MAX;
constexpr int SocketConfig::TProxyMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransportProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_2finternet_2fconfig_2eproto);
  return file_level_enum_descriptors_transport_2finternet_2fconfig_2eproto[2];
}
bool TransportProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TransportConfig::_Internal {
 public:
  static const ::v2ray::core::common::serial::TypedMessage& settings(const TransportConfig* msg);
};

const ::v2ray::core::common::serial::TypedMessage&
TransportConfig::_Internal::settings(const TransportConfig* msg) {
  return *msg->settings_;
}
void TransportConfig::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
TransportConfig::TransportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.transport.internet.TransportConfig)
}
TransportConfig::TransportConfig(const TransportConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_name().empty()) {
    protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_name(), 
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::v2ray::core::common::serial::TypedMessage(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:v2ray.core.transport.internet.TransportConfig)
}

void TransportConfig::SharedCtor() {
protocol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(protocol_));
}

TransportConfig::~TransportConfig() {
  // @@protoc_insertion_point(destructor:v2ray.core.transport.internet.TransportConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void TransportConfig::ArenaDtor(void* object) {
  TransportConfig* _this = reinterpret_cast< TransportConfig* >(object);
  (void)_this;
}
void TransportConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.transport.internet.TransportConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_name_.ClearToEmpty();
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::v2ray::core::transport::internet::TransportProtocol>(val));
        } else goto handle_unusual;
        continue;
      // .v2ray.core.common.serial.TypedMessage settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_protocol_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v2ray.core.transport.internet.TransportConfig.protocol_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.transport.internet.TransportConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // .v2ray.core.common.serial.TypedMessage settings = 2;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  // string protocol_name = 3;
  if (this->protocol_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_name().data(), static_cast<int>(this->_internal_protocol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v2ray.core.transport.internet.TransportConfig.protocol_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_protocol_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.transport.internet.TransportConfig)
  return target;
}

size_t TransportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.transport.internet.TransportConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_name = 3;
  if (this->protocol_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_name());
  }

  // .v2ray.core.common.serial.TypedMessage settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.transport.internet.TransportConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.transport.internet.TransportConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.transport.internet.TransportConfig)
    MergeFrom(*source);
  }
}

void TransportConfig::MergeFrom(const TransportConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.transport.internet.TransportConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_name().size() > 0) {
    _internal_set_protocol_name(from._internal_protocol_name());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::v2ray::core::common::serial::TypedMessage::MergeFrom(from._internal_settings());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
}

void TransportConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.transport.internet.TransportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportConfig::CopyFrom(const TransportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.transport.internet.TransportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportConfig::IsInitialized() const {
  return true;
}

void TransportConfig::InternalSwap(TransportConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_name_.Swap(&other->protocol_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportConfig, protocol_)
      + sizeof(TransportConfig::protocol_)
      - PROTOBUF_FIELD_OFFSET(TransportConfig, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StreamConfig::_Internal {
 public:
  static const ::v2ray::core::transport::internet::SocketConfig& socket_settings(const StreamConfig* msg);
};

const ::v2ray::core::transport::internet::SocketConfig&
StreamConfig::_Internal::socket_settings(const StreamConfig* msg) {
  return *msg->socket_settings_;
}
void StreamConfig::clear_security_settings() {
  security_settings_.Clear();
}
StreamConfig::StreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transport_settings_(arena),
  security_settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.transport.internet.StreamConfig)
}
StreamConfig::StreamConfig(const StreamConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transport_settings_(from.transport_settings_),
      security_settings_(from.security_settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  security_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_type().empty()) {
    security_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_security_type(), 
      GetArena());
  }
  protocol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_name().empty()) {
    protocol_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_name(), 
      GetArena());
  }
  if (from._internal_has_socket_settings()) {
    socket_settings_ = new ::v2ray::core::transport::internet::SocketConfig(*from.socket_settings_);
  } else {
    socket_settings_ = nullptr;
  }
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:v2ray.core.transport.internet.StreamConfig)
}

void StreamConfig::SharedCtor() {
security_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
protocol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&socket_settings_)) + sizeof(protocol_));
}

StreamConfig::~StreamConfig() {
  // @@protoc_insertion_point(destructor:v2ray.core.transport.internet.StreamConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  security_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete socket_settings_;
}

void StreamConfig::ArenaDtor(void* object) {
  StreamConfig* _this = reinterpret_cast< StreamConfig* >(object);
  (void)_this;
}
void StreamConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.transport.internet.StreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transport_settings_.Clear();
  security_settings_.Clear();
  security_type_.ClearToEmpty();
  protocol_name_.ClearToEmpty();
  if (GetArena() == nullptr && socket_settings_ != nullptr) {
    delete socket_settings_;
  }
  socket_settings_ = nullptr;
  protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::v2ray::core::transport::internet::TransportProtocol>(val));
        } else goto handle_unusual;
        continue;
      // repeated .v2ray.core.transport.internet.TransportConfig transport_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transport_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string security_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_security_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v2ray.core.transport.internet.StreamConfig.security_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .v2ray.core.common.serial.TypedMessage security_settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_security_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string protocol_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_protocol_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v2ray.core.transport.internet.StreamConfig.protocol_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v2ray.core.transport.internet.SocketConfig socket_settings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.transport.internet.StreamConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // repeated .v2ray.core.transport.internet.TransportConfig transport_settings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transport_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transport_settings(i), target, stream);
  }

  // string security_type = 3;
  if (this->security_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_type().data(), static_cast<int>(this->_internal_security_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v2ray.core.transport.internet.StreamConfig.security_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_security_type(), target);
  }

  // repeated .v2ray.core.common.serial.TypedMessage security_settings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_security_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_security_settings(i), target, stream);
  }

  // string protocol_name = 5;
  if (this->protocol_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_name().data(), static_cast<int>(this->_internal_protocol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v2ray.core.transport.internet.StreamConfig.protocol_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_protocol_name(), target);
  }

  // .v2ray.core.transport.internet.SocketConfig socket_settings = 6;
  if (this->has_socket_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::socket_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.transport.internet.StreamConfig)
  return target;
}

size_t StreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.transport.internet.StreamConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v2ray.core.transport.internet.TransportConfig transport_settings = 2;
  total_size += 1UL * this->_internal_transport_settings_size();
  for (const auto& msg : this->transport_settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v2ray.core.common.serial.TypedMessage security_settings = 4;
  total_size += 1UL * this->_internal_security_settings_size();
  for (const auto& msg : this->security_settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string security_type = 3;
  if (this->security_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_type());
  }

  // string protocol_name = 5;
  if (this->protocol_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_name());
  }

  // .v2ray.core.transport.internet.SocketConfig socket_settings = 6;
  if (this->has_socket_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socket_settings_);
  }

  // .v2ray.core.transport.internet.TransportProtocol protocol = 1 [deprecated = true];
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.transport.internet.StreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.transport.internet.StreamConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.transport.internet.StreamConfig)
    MergeFrom(*source);
  }
}

void StreamConfig::MergeFrom(const StreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.transport.internet.StreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transport_settings_.MergeFrom(from.transport_settings_);
  security_settings_.MergeFrom(from.security_settings_);
  if (from.security_type().size() > 0) {
    _internal_set_security_type(from._internal_security_type());
  }
  if (from.protocol_name().size() > 0) {
    _internal_set_protocol_name(from._internal_protocol_name());
  }
  if (from.has_socket_settings()) {
    _internal_mutable_socket_settings()->::v2ray::core::transport::internet::SocketConfig::MergeFrom(from._internal_socket_settings());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
}

void StreamConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.transport.internet.StreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamConfig::CopyFrom(const StreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.transport.internet.StreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamConfig::IsInitialized() const {
  return true;
}

void StreamConfig::InternalSwap(StreamConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transport_settings_.InternalSwap(&other->transport_settings_);
  security_settings_.InternalSwap(&other->security_settings_);
  security_type_.Swap(&other->security_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocol_name_.Swap(&other->protocol_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamConfig, protocol_)
      + sizeof(StreamConfig::protocol_)
      - PROTOBUF_FIELD_OFFSET(StreamConfig, socket_settings_)>(
          reinterpret_cast<char*>(&socket_settings_),
          reinterpret_cast<char*>(&other->socket_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProxyConfig::_Internal {
 public:
};

ProxyConfig::ProxyConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.transport.internet.ProxyConfig)
}
ProxyConfig::ProxyConfig(const ProxyConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  transportlayerproxy_ = from.transportlayerproxy_;
  // @@protoc_insertion_point(copy_constructor:v2ray.core.transport.internet.ProxyConfig)
}

void ProxyConfig::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transportlayerproxy_ = false;
}

ProxyConfig::~ProxyConfig() {
  // @@protoc_insertion_point(destructor:v2ray.core.transport.internet.ProxyConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProxyConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProxyConfig::ArenaDtor(void* object) {
  ProxyConfig* _this = reinterpret_cast< ProxyConfig* >(object);
  (void)_this;
}
void ProxyConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProxyConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProxyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.transport.internet.ProxyConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  transportlayerproxy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProxyConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v2ray.core.transport.internet.ProxyConfig.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transportLayerProxy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          transportlayerproxy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProxyConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.transport.internet.ProxyConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v2ray.core.transport.internet.ProxyConfig.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // bool transportLayerProxy = 2;
  if (this->transportlayerproxy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_transportlayerproxy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.transport.internet.ProxyConfig)
  return target;
}

size_t ProxyConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.transport.internet.ProxyConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // bool transportLayerProxy = 2;
  if (this->transportlayerproxy() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProxyConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.transport.internet.ProxyConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProxyConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProxyConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.transport.internet.ProxyConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.transport.internet.ProxyConfig)
    MergeFrom(*source);
  }
}

void ProxyConfig::MergeFrom(const ProxyConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.transport.internet.ProxyConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.transportlayerproxy() != 0) {
    _internal_set_transportlayerproxy(from._internal_transportlayerproxy());
  }
}

void ProxyConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.transport.internet.ProxyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyConfig::CopyFrom(const ProxyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.transport.internet.ProxyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyConfig::IsInitialized() const {
  return true;
}

void ProxyConfig::InternalSwap(ProxyConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(transportlayerproxy_, other->transportlayerproxy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SocketConfig::_Internal {
 public:
};

SocketConfig::SocketConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v2ray.core.transport.internet.SocketConfig)
}
SocketConfig::SocketConfig(const SocketConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bind_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bind_address().empty()) {
    bind_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bind_address(), 
      GetArena());
  }
  ::memcpy(&mark_, &from.mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_keep_alive_interval_) -
    reinterpret_cast<char*>(&mark_)) + sizeof(tcp_keep_alive_interval_));
  // @@protoc_insertion_point(copy_constructor:v2ray.core.transport.internet.SocketConfig)
}

void SocketConfig::SharedCtor() {
bind_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mark_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tcp_keep_alive_interval_) -
    reinterpret_cast<char*>(&mark_)) + sizeof(tcp_keep_alive_interval_));
}

SocketConfig::~SocketConfig() {
  // @@protoc_insertion_point(destructor:v2ray.core.transport.internet.SocketConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SocketConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bind_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SocketConfig::ArenaDtor(void* object) {
  SocketConfig* _this = reinterpret_cast< SocketConfig* >(object);
  (void)_this;
}
void SocketConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:v2ray.core.transport.internet.SocketConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bind_address_.ClearToEmpty();
  ::memset(&mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_keep_alive_interval_) -
      reinterpret_cast<char*>(&mark_)) + sizeof(tcp_keep_alive_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v2ray.core.transport.internet.SocketConfig.TCPFastOpenState tfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tfo(static_cast<::v2ray::core::transport::internet::SocketConfig_TCPFastOpenState>(val));
        } else goto handle_unusual;
        continue;
      // .v2ray.core.transport.internet.SocketConfig.TProxyMode tproxy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tproxy(static_cast<::v2ray::core::transport::internet::SocketConfig_TProxyMode>(val));
        } else goto handle_unusual;
        continue;
      // bool receive_original_dest_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          receive_original_dest_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bind_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bind_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bind_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bind_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool accept_proxy_protocol = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          accept_proxy_protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tcp_keep_alive_interval = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tcp_keep_alive_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v2ray.core.transport.internet.SocketConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mark = 1;
  if (this->mark() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mark(), target);
  }

  // .v2ray.core.transport.internet.SocketConfig.TCPFastOpenState tfo = 2;
  if (this->tfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tfo(), target);
  }

  // .v2ray.core.transport.internet.SocketConfig.TProxyMode tproxy = 3;
  if (this->tproxy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tproxy(), target);
  }

  // bool receive_original_dest_address = 4;
  if (this->receive_original_dest_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_receive_original_dest_address(), target);
  }

  // bytes bind_address = 5;
  if (this->bind_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bind_address(), target);
  }

  // uint32 bind_port = 6;
  if (this->bind_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bind_port(), target);
  }

  // bool accept_proxy_protocol = 7;
  if (this->accept_proxy_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_accept_proxy_protocol(), target);
  }

  // int32 tcp_keep_alive_interval = 8;
  if (this->tcp_keep_alive_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_tcp_keep_alive_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2ray.core.transport.internet.SocketConfig)
  return target;
}

size_t SocketConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2ray.core.transport.internet.SocketConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bind_address = 5;
  if (this->bind_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bind_address());
  }

  // int32 mark = 1;
  if (this->mark() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mark());
  }

  // .v2ray.core.transport.internet.SocketConfig.TCPFastOpenState tfo = 2;
  if (this->tfo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tfo());
  }

  // .v2ray.core.transport.internet.SocketConfig.TProxyMode tproxy = 3;
  if (this->tproxy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tproxy());
  }

  // bool receive_original_dest_address = 4;
  if (this->receive_original_dest_address() != 0) {
    total_size += 1 + 1;
  }

  // bool accept_proxy_protocol = 7;
  if (this->accept_proxy_protocol() != 0) {
    total_size += 1 + 1;
  }

  // uint32 bind_port = 6;
  if (this->bind_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bind_port());
  }

  // int32 tcp_keep_alive_interval = 8;
  if (this->tcp_keep_alive_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tcp_keep_alive_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2ray.core.transport.internet.SocketConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2ray.core.transport.internet.SocketConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2ray.core.transport.internet.SocketConfig)
    MergeFrom(*source);
  }
}

void SocketConfig::MergeFrom(const SocketConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2ray.core.transport.internet.SocketConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bind_address().size() > 0) {
    _internal_set_bind_address(from._internal_bind_address());
  }
  if (from.mark() != 0) {
    _internal_set_mark(from._internal_mark());
  }
  if (from.tfo() != 0) {
    _internal_set_tfo(from._internal_tfo());
  }
  if (from.tproxy() != 0) {
    _internal_set_tproxy(from._internal_tproxy());
  }
  if (from.receive_original_dest_address() != 0) {
    _internal_set_receive_original_dest_address(from._internal_receive_original_dest_address());
  }
  if (from.accept_proxy_protocol() != 0) {
    _internal_set_accept_proxy_protocol(from._internal_accept_proxy_protocol());
  }
  if (from.bind_port() != 0) {
    _internal_set_bind_port(from._internal_bind_port());
  }
  if (from.tcp_keep_alive_interval() != 0) {
    _internal_set_tcp_keep_alive_interval(from._internal_tcp_keep_alive_interval());
  }
}

void SocketConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2ray.core.transport.internet.SocketConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketConfig::CopyFrom(const SocketConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2ray.core.transport.internet.SocketConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketConfig::IsInitialized() const {
  return true;
}

void SocketConfig::InternalSwap(SocketConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bind_address_.Swap(&other->bind_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketConfig, tcp_keep_alive_interval_)
      + sizeof(SocketConfig::tcp_keep_alive_interval_)
      - PROTOBUF_FIELD_OFFSET(SocketConfig, mark_)>(
          reinterpret_cast<char*>(&mark_),
          reinterpret_cast<char*>(&other->mark_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace internet
}  // namespace transport
}  // namespace core
}  // namespace v2ray
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v2ray::core::transport::internet::TransportConfig* Arena::CreateMaybeMessage< ::v2ray::core::transport::internet::TransportConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::transport::internet::TransportConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::v2ray::core::transport::internet::StreamConfig* Arena::CreateMaybeMessage< ::v2ray::core::transport::internet::StreamConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::transport::internet::StreamConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::v2ray::core::transport::internet::ProxyConfig* Arena::CreateMaybeMessage< ::v2ray::core::transport::internet::ProxyConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::transport::internet::ProxyConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::v2ray::core::transport::internet::SocketConfig* Arena::CreateMaybeMessage< ::v2ray::core::transport::internet::SocketConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v2ray::core::transport::internet::SocketConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
